syntax = "proto3";
option swift_prefix="SP";

import "Credentials.proto";
import "ClientInfo.proto";
import "Challenge.proto";

//Login request
message LoginRequest {
    ShortClientInfo client = 1;
    optional bytes context = 2;
    optional LoginChallengeAnswerData answer_data = 3;
    optional LoginInteraction interaction = 4;
    oneof request {
        //Stored credentials from previous authorization
        StoredCredential stored = 100;
        //Login v3 credentials
        Password password_v3 = 101;
        FacebookAccessToken facebook = 102;
        PhoneNumber phone = 103;
        //Magic link from e-mail
        OneTimeToken one_time_token = 104;
        ParentChildCredential parent_child_cred = 105;
        AppleSignInCredential apple_sign_in = 106;
        //Login v4 credentials
        Password password_v4 = 109;
    }
}

message LoginInteraction {
    bytes unknown = 1;
    LoginInteractionFinish finish = 2;
    LoginInteractionHint hint = 3;
}

message LoginInteractionFinish {
    int32 unknown1 = 1;
    string uri = 2;
    string nonce = 3;
    int32 unknown2 = 4;
}

message LoginInteractionHint {
    string ui_locale = 1;
}

message PhoneNumber {
    string number = 1;
    string iso_country_code = 2;
    string country_calling_code = 3;
}

message LoginChallengeAnswerData {
    repeated LoginChallengeAnswer answers = 1;
}

message LoginChallengeAnswer {
    oneof answer {
        HashcashChallengeAnswer hashcash = 1;
        CodeChallengeAnswer code = 2;
        CaptchaChallengeAnswer captcha = 3;
    }
}

//Login response
message LoginResponse {
    enum Warning {
        UNKNOWN_WARNING = 0;
        DEPRECATED_PROTOCOL_VERSION = 1;
    }
    enum Error {
        UNKNOWN_ERROR = 0;
        INVALID_CREDENTIALS = 1;
        BAD_REQUEST = 2;
        UNSUPPORTED_LOGIN_PROTOCOL = 3;
        TIMEOUT = 4;
        UNKNOWN_IDENTIFIER = 5;
        TOO_MANY_ATTEMPTS = 6;
        INVALID_PHONENUMBER = 7;
        TRY_AGAIN_LATER = 8;
    }
    oneof response {
        AuthToken auth = 1;
        LoginResponse.Error error = 2;
        LoginChallengesData challenges = 3;
    }
    repeated LoginResponse.Warning warnings = 4;
    optional bytes context = 5;
    optional string id_token = 6;
    optional UserInfo user_info = 7;
    optional string uuid_unknown = 8;
    optional string uuid_unknown2 = 9;
}

message AuthToken {
    string username = 1;
    string token = 2;
    bytes stored_credential = 3;
    int32 expires_in_s = 4;
}

message UserInfo {
    enum Gender {
        UNKNOWN = 0;
        MALE = 1;
        FEMALE = 2;
        NEUTRAL = 3;
    }
    string name = 1;
    string email = 2;
    bool email_verified = 3;
    string birthdate = 4;
    UserInfo.Gender gender = 5;
    string phone = 6;
    bool phone_verified = 7;
    bool email_alredy_registered = 8;
}

message LoginChallengesData {
    repeated LoginChallenge challenges = 1;
}

message LoginChallenge {
    oneof method {
        HashcashChallenge hashcash = 1;
        CodeChallenge code = 2;
        CaptchaChallenge captcha = 3;
    }
}
