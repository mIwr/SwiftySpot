// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PlaylistInfo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PlaylistInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uid: Data {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  var meta: PlaylistMeta {
    get {return _storage._meta ?? PlaylistMeta()}
    set {_uniqueStorage()._meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  var hasMeta: Bool {return _storage._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  mutating func clearMeta() {_uniqueStorage()._meta = nil}

  var payload: PlaylistPayload {
    get {return _storage._payload ?? PlaylistPayload()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() {_uniqueStorage()._payload = nil}

  var createTsUtc: Int64 {
    get {return _storage._createTsUtc}
    set {_uniqueStorage()._createTsUtc = newValue}
  }

  var author: String {
    get {return _storage._author}
    set {_uniqueStorage()._author = newValue}
  }

  var todoUnknownNum: Int32 {
    get {return _storage._todoUnknownNum}
    set {_uniqueStorage()._todoUnknownNum = newValue}
  }

  var obj: PlaylistMetaUnknownObj {
    get {return _storage._obj ?? PlaylistMetaUnknownObj()}
    set {_uniqueStorage()._obj = newValue}
  }
  /// Returns true if `obj` has been explicitly set.
  var hasObj: Bool {return _storage._obj != nil}
  /// Clears the value of `obj`. Subsequent reads from it will return its default value.
  mutating func clearObj() {_uniqueStorage()._obj = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PlaylistPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var val1: Int32 = 0

  var val2: Int32 = 0

  var tracks: [PlaylistTrack] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PlaylistMeta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var desc: String = String()

  var todoUnknownNum: Int32 = 0

  var idName: String = String()

  var additional: Dictionary<String,String> = [:]

  var image: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PlaylistMetaUnknownObj {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var var1: Int32 = 0

  var var2: Int32 = 0

  var var4: Int32 = 0

  var var5: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PlaylistTrack {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uri: String = String()

  var info: PlaylistTrack.Info {
    get {return _info ?? PlaylistTrack.Info()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Info {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var createTsMsUtc: Int64 {
      get {return _createTsMsUtc ?? 0}
      set {_createTsMsUtc = newValue}
    }
    /// Returns true if `createTsMsUtc` has been explicitly set.
    var hasCreateTsMsUtc: Bool {return self._createTsMsUtc != nil}
    /// Clears the value of `createTsMsUtc`. Subsequent reads from it will return its default value.
    mutating func clearCreateTsMsUtc() {self._createTsMsUtc = nil}

    var props: Dictionary<String,String> = [:]

    var todoUnknownBytes: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _createTsMsUtc: Int64? = nil
  }

  init() {}

  fileprivate var _info: PlaylistTrack.Info? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension PlaylistInfo: @unchecked Sendable {}
extension PlaylistPayload: @unchecked Sendable {}
extension PlaylistMeta: @unchecked Sendable {}
extension PlaylistMetaUnknownObj: @unchecked Sendable {}
extension PlaylistTrack: @unchecked Sendable {}
extension PlaylistTrack.Info: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PlaylistInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PlaylistInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "count"),
    3: .same(proto: "meta"),
    5: .same(proto: "payload"),
    15: .standard(proto: "create_ts_utc"),
    16: .same(proto: "author"),
    17: .same(proto: "todoUnknownNum"),
    18: .same(proto: "obj"),
  ]

  fileprivate class _StorageClass {
    var _uid: Data = Data()
    var _count: Int32 = 0
    var _meta: PlaylistMeta? = nil
    var _payload: PlaylistPayload? = nil
    var _createTsUtc: Int64 = 0
    var _author: String = String()
    var _todoUnknownNum: Int32 = 0
    var _obj: PlaylistMetaUnknownObj? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _count = source._count
      _meta = source._meta
      _payload = source._payload
      _createTsUtc = source._createTsUtc
      _author = source._author
      _todoUnknownNum = source._todoUnknownNum
      _obj = source._obj
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._uid) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._count) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._meta) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._payload) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._createTsUtc) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._author) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._todoUnknownNum) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._obj) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._uid.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._uid, fieldNumber: 1)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 2)
      }
      try { if let v = _storage._meta {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._createTsUtc != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTsUtc, fieldNumber: 15)
      }
      if !_storage._author.isEmpty {
        try visitor.visitSingularStringField(value: _storage._author, fieldNumber: 16)
      }
      if _storage._todoUnknownNum != 0 {
        try visitor.visitSingularInt32Field(value: _storage._todoUnknownNum, fieldNumber: 17)
      }
      try { if let v = _storage._obj {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PlaylistInfo, rhs: PlaylistInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._createTsUtc != rhs_storage._createTsUtc {return false}
        if _storage._author != rhs_storage._author {return false}
        if _storage._todoUnknownNum != rhs_storage._todoUnknownNum {return false}
        if _storage._obj != rhs_storage._obj {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PlaylistPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PlaylistPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val1"),
    2: .same(proto: "val2"),
    3: .same(proto: "tracks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.val1) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.val2) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tracks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.val1 != 0 {
      try visitor.visitSingularInt32Field(value: self.val1, fieldNumber: 1)
    }
    if self.val2 != 0 {
      try visitor.visitSingularInt32Field(value: self.val2, fieldNumber: 2)
    }
    if !self.tracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tracks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PlaylistPayload, rhs: PlaylistPayload) -> Bool {
    if lhs.val1 != rhs.val1 {return false}
    if lhs.val2 != rhs.val2 {return false}
    if lhs.tracks != rhs.tracks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PlaylistMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PlaylistMeta"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "desc"),
    4: .same(proto: "todoUnknownNum"),
    11: .same(proto: "idName"),
    12: .same(proto: "additional"),
    13: .same(proto: "image"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.todoUnknownNum) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.idName) }()
      case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.additional) }()
      case 13: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.image) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 2)
    }
    if self.todoUnknownNum != 0 {
      try visitor.visitSingularInt32Field(value: self.todoUnknownNum, fieldNumber: 4)
    }
    if !self.idName.isEmpty {
      try visitor.visitSingularStringField(value: self.idName, fieldNumber: 11)
    }
    if !self.additional.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.additional, fieldNumber: 12)
    }
    if !self.image.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.image, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PlaylistMeta, rhs: PlaylistMeta) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.todoUnknownNum != rhs.todoUnknownNum {return false}
    if lhs.idName != rhs.idName {return false}
    if lhs.additional != rhs.additional {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PlaylistMetaUnknownObj: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PlaylistMetaUnknownObj"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "var1"),
    2: .same(proto: "var2"),
    4: .same(proto: "var4"),
    5: .same(proto: "var5"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.var1) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.var2) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.var4) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.var5) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.var1 != 0 {
      try visitor.visitSingularInt32Field(value: self.var1, fieldNumber: 1)
    }
    if self.var2 != 0 {
      try visitor.visitSingularInt32Field(value: self.var2, fieldNumber: 2)
    }
    if self.var4 != 0 {
      try visitor.visitSingularInt32Field(value: self.var4, fieldNumber: 4)
    }
    if self.var5 != 0 {
      try visitor.visitSingularInt32Field(value: self.var5, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PlaylistMetaUnknownObj, rhs: PlaylistMetaUnknownObj) -> Bool {
    if lhs.var1 != rhs.var1 {return false}
    if lhs.var2 != rhs.var2 {return false}
    if lhs.var4 != rhs.var4 {return false}
    if lhs.var5 != rhs.var5 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PlaylistTrack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PlaylistTrack"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PlaylistTrack, rhs: PlaylistTrack) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PlaylistTrack.Info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = PlaylistTrack.protoMessageName + ".Info"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "create_ts_ms_utc"),
    11: .same(proto: "props"),
    12: .same(proto: "todoUnknownBytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularInt64Field(value: &self._createTsMsUtc) }()
      case 11: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.props) }()
      case 12: try { try decoder.decodeSingularBytesField(value: &self.todoUnknownBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._createTsMsUtc {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    if !self.props.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.props, fieldNumber: 11)
    }
    if !self.todoUnknownBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.todoUnknownBytes, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PlaylistTrack.Info, rhs: PlaylistTrack.Info) -> Bool {
    if lhs._createTsMsUtc != rhs._createTsMsUtc {return false}
    if lhs.props != rhs.props {return false}
    if lhs.todoUnknownBytes != rhs.todoUnknownBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
