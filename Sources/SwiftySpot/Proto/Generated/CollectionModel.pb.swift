// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CollectionModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///Collection data page
public struct SPPageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Collection items
  public var items: [SPCollectionPageItem] = []

  ///Collection next page ID. May be nil, if page is the last or single
  public var nextPageToken: String = String()

  ///Collection state ID for synchronizing
  public var syncToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Collection, which represent data comparing with actual collection (remote) and current (local) by sync token
public struct SPDeltaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Local collection may be updated flag
  public var deltaUpdatePossible: Bool = false

  ///Collection items
  public var items: [SPCollectionPageItem] = []

  ///Actual collection state ID for synchronizing
  public var syncToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Universal collection item
public struct SPCollectionPageItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ////Item navigate uri
  public var uri: String = String()

  ///Item create timestamp
  public var addedAtTs: Int64 = 0

  ///Item was removed from collection flag
  public var isRemoved: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SPPageResponse: @unchecked Sendable {}
extension SPDeltaResponse: @unchecked Sendable {}
extension SPCollectionPageItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.spotify.collection2.v2.proto"

extension SPPageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .standard(proto: "next_page_token"),
    3: .standard(proto: "sync_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.syncToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if !self.syncToken.isEmpty {
      try visitor.visitSingularStringField(value: self.syncToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPPageResponse, rhs: SPPageResponse) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.syncToken != rhs.syncToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPDeltaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeltaResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delta_update_possible"),
    2: .same(proto: "items"),
    3: .standard(proto: "sync_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.deltaUpdatePossible) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.syncToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deltaUpdatePossible != false {
      try visitor.visitSingularBoolField(value: self.deltaUpdatePossible, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.syncToken.isEmpty {
      try visitor.visitSingularStringField(value: self.syncToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPDeltaResponse, rhs: SPDeltaResponse) -> Bool {
    if lhs.deltaUpdatePossible != rhs.deltaUpdatePossible {return false}
    if lhs.items != rhs.items {return false}
    if lhs.syncToken != rhs.syncToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCollectionPageItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CollectionPageItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .standard(proto: "added_at_ts"),
    3: .standard(proto: "is_removed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.addedAtTs) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isRemoved) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if self.addedAtTs != 0 {
      try visitor.visitSingularInt64Field(value: self.addedAtTs, fieldNumber: 2)
    }
    if self.isRemoved != false {
      try visitor.visitSingularBoolField(value: self.isRemoved, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPCollectionPageItem, rhs: SPCollectionPageItem) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.addedAtTs != rhs.addedAtTs {return false}
    if lhs.isRemoved != rhs.isRemoved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
