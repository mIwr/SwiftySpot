// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SPCollection.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Spotify_Collection2_V2_Proto_PageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var setName: String = String()

  var paginationToken: String = String()

  var limit: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_PageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Com_Spotify_Collection2_V2_Proto_CollectionItem] = []

  var nextPageToken: String = String()

  var syncToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_DeltaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var setName: String = String()

  var lastSyncToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_DeltaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deltaUpdatePossible: Bool = false

  var items: [Com_Spotify_Collection2_V2_Proto_CollectionItem] = []

  var syncToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_WriteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var setName: String = String()

  var items: [Com_Spotify_Collection2_V2_Proto_CollectionItem] = []

  var clientUpdateID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_PubSubUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var setName: String = String()

  var items: [Com_Spotify_Collection2_V2_Proto_CollectionItem] = []

  var clientUpdateID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_InitializedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var setName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_InitializedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var initialized: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Collection2_V2_Proto_CollectionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uri: String = String()

  var addedAtTs: Int64 = 0

  var isRemoved: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Com_Spotify_Collection2_V2_Proto_PageRequest: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_PageResponse: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_DeltaRequest: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_DeltaResponse: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_WriteRequest: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_PubSubUpdate: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_InitializedRequest: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_InitializedResponse: @unchecked Sendable {}
extension Com_Spotify_Collection2_V2_Proto_CollectionItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.spotify.collection2.v2.proto"

extension Com_Spotify_Collection2_V2_Proto_PageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "set_name"),
    3: .standard(proto: "pagination_token"),
    4: .same(proto: "limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.setName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.paginationToken) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.setName.isEmpty {
      try visitor.visitSingularStringField(value: self.setName, fieldNumber: 2)
    }
    if !self.paginationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.paginationToken, fieldNumber: 3)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_PageRequest, rhs: Com_Spotify_Collection2_V2_Proto_PageRequest) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.setName != rhs.setName {return false}
    if lhs.paginationToken != rhs.paginationToken {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_PageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PageResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .standard(proto: "next_page_token"),
    3: .standard(proto: "sync_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.syncToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    if !self.syncToken.isEmpty {
      try visitor.visitSingularStringField(value: self.syncToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_PageResponse, rhs: Com_Spotify_Collection2_V2_Proto_PageResponse) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.syncToken != rhs.syncToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_DeltaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeltaRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "set_name"),
    3: .standard(proto: "last_sync_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.setName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lastSyncToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.setName.isEmpty {
      try visitor.visitSingularStringField(value: self.setName, fieldNumber: 2)
    }
    if !self.lastSyncToken.isEmpty {
      try visitor.visitSingularStringField(value: self.lastSyncToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_DeltaRequest, rhs: Com_Spotify_Collection2_V2_Proto_DeltaRequest) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.setName != rhs.setName {return false}
    if lhs.lastSyncToken != rhs.lastSyncToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_DeltaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeltaResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delta_update_possible"),
    2: .same(proto: "items"),
    3: .standard(proto: "sync_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.deltaUpdatePossible) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.syncToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deltaUpdatePossible != false {
      try visitor.visitSingularBoolField(value: self.deltaUpdatePossible, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.syncToken.isEmpty {
      try visitor.visitSingularStringField(value: self.syncToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_DeltaResponse, rhs: Com_Spotify_Collection2_V2_Proto_DeltaResponse) -> Bool {
    if lhs.deltaUpdatePossible != rhs.deltaUpdatePossible {return false}
    if lhs.items != rhs.items {return false}
    if lhs.syncToken != rhs.syncToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_WriteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WriteRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "set_name"),
    3: .same(proto: "items"),
    4: .standard(proto: "client_update_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.setName) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientUpdateID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.setName.isEmpty {
      try visitor.visitSingularStringField(value: self.setName, fieldNumber: 2)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 3)
    }
    if !self.clientUpdateID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientUpdateID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_WriteRequest, rhs: Com_Spotify_Collection2_V2_Proto_WriteRequest) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.setName != rhs.setName {return false}
    if lhs.items != rhs.items {return false}
    if lhs.clientUpdateID != rhs.clientUpdateID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_PubSubUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PubSubUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "set_name"),
    3: .same(proto: "items"),
    4: .standard(proto: "client_update_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.setName) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientUpdateID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.setName.isEmpty {
      try visitor.visitSingularStringField(value: self.setName, fieldNumber: 2)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 3)
    }
    if !self.clientUpdateID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientUpdateID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_PubSubUpdate, rhs: Com_Spotify_Collection2_V2_Proto_PubSubUpdate) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.setName != rhs.setName {return false}
    if lhs.items != rhs.items {return false}
    if lhs.clientUpdateID != rhs.clientUpdateID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_InitializedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InitializedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "set_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.setName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.setName.isEmpty {
      try visitor.visitSingularStringField(value: self.setName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_InitializedRequest, rhs: Com_Spotify_Collection2_V2_Proto_InitializedRequest) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.setName != rhs.setName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_InitializedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InitializedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "initialized"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.initialized) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.initialized != false {
      try visitor.visitSingularBoolField(value: self.initialized, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_InitializedResponse, rhs: Com_Spotify_Collection2_V2_Proto_InitializedResponse) -> Bool {
    if lhs.initialized != rhs.initialized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Collection2_V2_Proto_CollectionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectionItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .standard(proto: "added_at_ts"),
    3: .standard(proto: "is_removed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.addedAtTs) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isRemoved) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if self.addedAtTs != 0 {
      try visitor.visitSingularInt64Field(value: self.addedAtTs, fieldNumber: 2)
    }
    if self.isRemoved != false {
      try visitor.visitSingularBoolField(value: self.isRemoved, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Collection2_V2_Proto_CollectionItem, rhs: Com_Spotify_Collection2_V2_Proto_CollectionItem) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.addedAtTs != rhs.addedAtTs {return false}
    if lhs.isRemoved != rhs.isRemoved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
