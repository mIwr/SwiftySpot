// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Restrictions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SPRestrictions: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pauseReasons: [String] {
    get {return _storage._pauseReasons}
    set {_uniqueStorage()._pauseReasons = newValue}
  }

  var resumeReasons: [String] {
    get {return _storage._resumeReasons}
    set {_uniqueStorage()._resumeReasons = newValue}
  }

  var seekReasons: [String] {
    get {return _storage._seekReasons}
    set {_uniqueStorage()._seekReasons = newValue}
  }

  var peekPrevReasons: [String] {
    get {return _storage._peekPrevReasons}
    set {_uniqueStorage()._peekPrevReasons = newValue}
  }

  var peekNextReasons: [String] {
    get {return _storage._peekNextReasons}
    set {_uniqueStorage()._peekNextReasons = newValue}
  }

  var skipPrevReasons: [String] {
    get {return _storage._skipPrevReasons}
    set {_uniqueStorage()._skipPrevReasons = newValue}
  }

  var skipNextReasons: [String] {
    get {return _storage._skipNextReasons}
    set {_uniqueStorage()._skipNextReasons = newValue}
  }

  var repeatToggleReasons: [String] {
    get {return _storage._repeatToggleReasons}
    set {_uniqueStorage()._repeatToggleReasons = newValue}
  }

  var repeatTrackToggleReasons: [String] {
    get {return _storage._repeatTrackToggleReasons}
    set {_uniqueStorage()._repeatTrackToggleReasons = newValue}
  }

  var shiffleToggleTeasons: [String] {
    get {return _storage._shiffleToggleTeasons}
    set {_uniqueStorage()._shiffleToggleTeasons = newValue}
  }

  var setQueueReasons: [String] {
    get {return _storage._setQueueReasons}
    set {_uniqueStorage()._setQueueReasons = newValue}
  }

  var interruptPlaybackReasons: [String] {
    get {return _storage._interruptPlaybackReasons}
    set {_uniqueStorage()._interruptPlaybackReasons = newValue}
  }

  var transferPlaybackReasons: [String] {
    get {return _storage._transferPlaybackReasons}
    set {_uniqueStorage()._transferPlaybackReasons = newValue}
  }

  var remoteControlReasons: [String] {
    get {return _storage._remoteControlReasons}
    set {_uniqueStorage()._remoteControlReasons = newValue}
  }

  var insertIntoNextTrackReasons: [String] {
    get {return _storage._insertIntoNextTrackReasons}
    set {_uniqueStorage()._insertIntoNextTrackReasons = newValue}
  }

  var insertIntoContextTracksReasons: [String] {
    get {return _storage._insertIntoContextTracksReasons}
    set {_uniqueStorage()._insertIntoContextTracksReasons = newValue}
  }

  var reorderNextTracksReasons: [String] {
    get {return _storage._reorderNextTracksReasons}
    set {_uniqueStorage()._reorderNextTracksReasons = newValue}
  }

  var reorderContextTracksReasons: [String] {
    get {return _storage._reorderContextTracksReasons}
    set {_uniqueStorage()._reorderContextTracksReasons = newValue}
  }

  var removeFromNextTracksReasons: [String] {
    get {return _storage._removeFromNextTracksReasons}
    set {_uniqueStorage()._removeFromNextTracksReasons = newValue}
  }

  var removeFromContextTracksReasons: [String] {
    get {return _storage._removeFromContextTracksReasons}
    set {_uniqueStorage()._removeFromContextTracksReasons = newValue}
  }

  var updateContextReasons: [String] {
    get {return _storage._updateContextReasons}
    set {_uniqueStorage()._updateContextReasons = newValue}
  }

  var playReasons: [String] {
    get {return _storage._playReasons}
    set {_uniqueStorage()._playReasons = newValue}
  }

  var stopReasons: [String] {
    get {return _storage._stopReasons}
    set {_uniqueStorage()._stopReasons = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SPRestrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Restrictions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pause_reasons"),
    2: .standard(proto: "resume_reasons"),
    3: .standard(proto: "seek_reasons"),
    4: .standard(proto: "peek_prev_reasons"),
    5: .standard(proto: "peek_next_reasons"),
    6: .standard(proto: "skip_prev_reasons"),
    7: .standard(proto: "skip_next_reasons"),
    8: .standard(proto: "repeat_toggle_reasons"),
    9: .standard(proto: "repeat_track_toggle_reasons"),
    10: .standard(proto: "shiffle_toggle_teasons"),
    11: .standard(proto: "set_queue_reasons"),
    12: .standard(proto: "interrupt_playback_reasons"),
    13: .standard(proto: "transfer_playback_reasons"),
    14: .standard(proto: "remote_control_reasons"),
    15: .standard(proto: "insert_into_next_track_reasons"),
    16: .standard(proto: "insert_into_context_tracks_reasons"),
    17: .standard(proto: "reorder_next_tracks_reasons"),
    18: .standard(proto: "reorder_context_tracks_reasons"),
    19: .standard(proto: "remove_from_next_tracks_reasons"),
    20: .standard(proto: "remove_from_context_tracks_reasons"),
    21: .standard(proto: "update_context_reasons"),
    22: .standard(proto: "play_reasons"),
    23: .standard(proto: "stop_reasons"),
  ]

  fileprivate class _StorageClass {
    var _pauseReasons: [String] = []
    var _resumeReasons: [String] = []
    var _seekReasons: [String] = []
    var _peekPrevReasons: [String] = []
    var _peekNextReasons: [String] = []
    var _skipPrevReasons: [String] = []
    var _skipNextReasons: [String] = []
    var _repeatToggleReasons: [String] = []
    var _repeatTrackToggleReasons: [String] = []
    var _shiffleToggleTeasons: [String] = []
    var _setQueueReasons: [String] = []
    var _interruptPlaybackReasons: [String] = []
    var _transferPlaybackReasons: [String] = []
    var _remoteControlReasons: [String] = []
    var _insertIntoNextTrackReasons: [String] = []
    var _insertIntoContextTracksReasons: [String] = []
    var _reorderNextTracksReasons: [String] = []
    var _reorderContextTracksReasons: [String] = []
    var _removeFromNextTracksReasons: [String] = []
    var _removeFromContextTracksReasons: [String] = []
    var _updateContextReasons: [String] = []
    var _playReasons: [String] = []
    var _stopReasons: [String] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _pauseReasons = source._pauseReasons
      _resumeReasons = source._resumeReasons
      _seekReasons = source._seekReasons
      _peekPrevReasons = source._peekPrevReasons
      _peekNextReasons = source._peekNextReasons
      _skipPrevReasons = source._skipPrevReasons
      _skipNextReasons = source._skipNextReasons
      _repeatToggleReasons = source._repeatToggleReasons
      _repeatTrackToggleReasons = source._repeatTrackToggleReasons
      _shiffleToggleTeasons = source._shiffleToggleTeasons
      _setQueueReasons = source._setQueueReasons
      _interruptPlaybackReasons = source._interruptPlaybackReasons
      _transferPlaybackReasons = source._transferPlaybackReasons
      _remoteControlReasons = source._remoteControlReasons
      _insertIntoNextTrackReasons = source._insertIntoNextTrackReasons
      _insertIntoContextTracksReasons = source._insertIntoContextTracksReasons
      _reorderNextTracksReasons = source._reorderNextTracksReasons
      _reorderContextTracksReasons = source._reorderContextTracksReasons
      _removeFromNextTracksReasons = source._removeFromNextTracksReasons
      _removeFromContextTracksReasons = source._removeFromContextTracksReasons
      _updateContextReasons = source._updateContextReasons
      _playReasons = source._playReasons
      _stopReasons = source._stopReasons
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._pauseReasons) }()
        case 2: try { try decoder.decodeRepeatedStringField(value: &_storage._resumeReasons) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._seekReasons) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._peekPrevReasons) }()
        case 5: try { try decoder.decodeRepeatedStringField(value: &_storage._peekNextReasons) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._skipPrevReasons) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._skipNextReasons) }()
        case 8: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatToggleReasons) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._repeatTrackToggleReasons) }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._shiffleToggleTeasons) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._setQueueReasons) }()
        case 12: try { try decoder.decodeRepeatedStringField(value: &_storage._interruptPlaybackReasons) }()
        case 13: try { try decoder.decodeRepeatedStringField(value: &_storage._transferPlaybackReasons) }()
        case 14: try { try decoder.decodeRepeatedStringField(value: &_storage._remoteControlReasons) }()
        case 15: try { try decoder.decodeRepeatedStringField(value: &_storage._insertIntoNextTrackReasons) }()
        case 16: try { try decoder.decodeRepeatedStringField(value: &_storage._insertIntoContextTracksReasons) }()
        case 17: try { try decoder.decodeRepeatedStringField(value: &_storage._reorderNextTracksReasons) }()
        case 18: try { try decoder.decodeRepeatedStringField(value: &_storage._reorderContextTracksReasons) }()
        case 19: try { try decoder.decodeRepeatedStringField(value: &_storage._removeFromNextTracksReasons) }()
        case 20: try { try decoder.decodeRepeatedStringField(value: &_storage._removeFromContextTracksReasons) }()
        case 21: try { try decoder.decodeRepeatedStringField(value: &_storage._updateContextReasons) }()
        case 22: try { try decoder.decodeRepeatedStringField(value: &_storage._playReasons) }()
        case 23: try { try decoder.decodeRepeatedStringField(value: &_storage._stopReasons) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._pauseReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._pauseReasons, fieldNumber: 1)
      }
      if !_storage._resumeReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._resumeReasons, fieldNumber: 2)
      }
      if !_storage._seekReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._seekReasons, fieldNumber: 3)
      }
      if !_storage._peekPrevReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._peekPrevReasons, fieldNumber: 4)
      }
      if !_storage._peekNextReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._peekNextReasons, fieldNumber: 5)
      }
      if !_storage._skipPrevReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._skipPrevReasons, fieldNumber: 6)
      }
      if !_storage._skipNextReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._skipNextReasons, fieldNumber: 7)
      }
      if !_storage._repeatToggleReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatToggleReasons, fieldNumber: 8)
      }
      if !_storage._repeatTrackToggleReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._repeatTrackToggleReasons, fieldNumber: 9)
      }
      if !_storage._shiffleToggleTeasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._shiffleToggleTeasons, fieldNumber: 10)
      }
      if !_storage._setQueueReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._setQueueReasons, fieldNumber: 11)
      }
      if !_storage._interruptPlaybackReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._interruptPlaybackReasons, fieldNumber: 12)
      }
      if !_storage._transferPlaybackReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._transferPlaybackReasons, fieldNumber: 13)
      }
      if !_storage._remoteControlReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._remoteControlReasons, fieldNumber: 14)
      }
      if !_storage._insertIntoNextTrackReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._insertIntoNextTrackReasons, fieldNumber: 15)
      }
      if !_storage._insertIntoContextTracksReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._insertIntoContextTracksReasons, fieldNumber: 16)
      }
      if !_storage._reorderNextTracksReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._reorderNextTracksReasons, fieldNumber: 17)
      }
      if !_storage._reorderContextTracksReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._reorderContextTracksReasons, fieldNumber: 18)
      }
      if !_storage._removeFromNextTracksReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._removeFromNextTracksReasons, fieldNumber: 19)
      }
      if !_storage._removeFromContextTracksReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._removeFromContextTracksReasons, fieldNumber: 20)
      }
      if !_storage._updateContextReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._updateContextReasons, fieldNumber: 21)
      }
      if !_storage._playReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._playReasons, fieldNumber: 22)
      }
      if !_storage._stopReasons.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._stopReasons, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPRestrictions, rhs: SPRestrictions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pauseReasons != rhs_storage._pauseReasons {return false}
        if _storage._resumeReasons != rhs_storage._resumeReasons {return false}
        if _storage._seekReasons != rhs_storage._seekReasons {return false}
        if _storage._peekPrevReasons != rhs_storage._peekPrevReasons {return false}
        if _storage._peekNextReasons != rhs_storage._peekNextReasons {return false}
        if _storage._skipPrevReasons != rhs_storage._skipPrevReasons {return false}
        if _storage._skipNextReasons != rhs_storage._skipNextReasons {return false}
        if _storage._repeatToggleReasons != rhs_storage._repeatToggleReasons {return false}
        if _storage._repeatTrackToggleReasons != rhs_storage._repeatTrackToggleReasons {return false}
        if _storage._shiffleToggleTeasons != rhs_storage._shiffleToggleTeasons {return false}
        if _storage._setQueueReasons != rhs_storage._setQueueReasons {return false}
        if _storage._interruptPlaybackReasons != rhs_storage._interruptPlaybackReasons {return false}
        if _storage._transferPlaybackReasons != rhs_storage._transferPlaybackReasons {return false}
        if _storage._remoteControlReasons != rhs_storage._remoteControlReasons {return false}
        if _storage._insertIntoNextTrackReasons != rhs_storage._insertIntoNextTrackReasons {return false}
        if _storage._insertIntoContextTracksReasons != rhs_storage._insertIntoContextTracksReasons {return false}
        if _storage._reorderNextTracksReasons != rhs_storage._reorderNextTracksReasons {return false}
        if _storage._reorderContextTracksReasons != rhs_storage._reorderContextTracksReasons {return false}
        if _storage._removeFromNextTracksReasons != rhs_storage._removeFromNextTracksReasons {return false}
        if _storage._removeFromContextTracksReasons != rhs_storage._removeFromContextTracksReasons {return false}
        if _storage._updateContextReasons != rhs_storage._updateContextReasons {return false}
        if _storage._playReasons != rhs_storage._playReasons {return false}
        if _storage._stopReasons != rhs_storage._stopReasons {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
