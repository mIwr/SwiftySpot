// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SPDownloadInfo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Spotify_Playplay_Proto_Interactivity: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownInteractivity // = 0
  case interactive // = 1
  case download // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownInteractivity
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownInteractivity
    case 1: self = .interactive
    case 2: self = .download
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownInteractivity: return 0
    case .interactive: return 1
    case .download: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Spotify_Playplay_Proto_Interactivity: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Spotify_Playplay_Proto_Interactivity] = [
    .unknownInteractivity,
    .interactive,
    .download,
  ]
}

#endif  // swift(>=4.2)

enum Spotify_Playplay_Proto_ContentType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownContentType // = 0
  case audioTrack // = 1
  case audioEpisode // = 2
  case audioAdd // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownContentType
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownContentType
    case 1: self = .audioTrack
    case 2: self = .audioEpisode
    case 3: self = .audioAdd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownContentType: return 0
    case .audioTrack: return 1
    case .audioEpisode: return 2
    case .audioAdd: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Spotify_Playplay_Proto_ContentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Spotify_Playplay_Proto_ContentType] = [
    .unknownContentType,
    .audioTrack,
    .audioEpisode,
    .audioAdd,
  ]
}

#endif  // swift(>=4.2)

enum Spotify_Playplay_Proto_DownloadInfoStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case cdn // = 0
  case storage // = 1
  case restricted // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .cdn
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cdn
    case 1: self = .storage
    case 3: self = .restricted
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .cdn: return 0
    case .storage: return 1
    case .restricted: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Spotify_Playplay_Proto_DownloadInfoStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Spotify_Playplay_Proto_DownloadInfoStatus] = [
    .cdn,
    .storage,
    .restricted,
  ]
}

#endif  // swift(>=4.2)

///PlayPlayLicenseRequest
struct Spotify_Playplay_Proto_PlayIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int32 = 0

  var token: Data = Data()

  var cacheID: Data {
    get {return _cacheID ?? Data()}
    set {_cacheID = newValue}
  }
  /// Returns true if `cacheID` has been explicitly set.
  var hasCacheID: Bool {return self._cacheID != nil}
  /// Clears the value of `cacheID`. Subsequent reads from it will return its default value.
  mutating func clearCacheID() {self._cacheID = nil}

  var interactivity: Spotify_Playplay_Proto_Interactivity = .unknownInteractivity

  var contentType: Spotify_Playplay_Proto_ContentType = .unknownContentType

  var timestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cacheID: Data? = nil
}

///PlayPlayLicenseResponse
struct Spotify_Playplay_Proto_PlayIntentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var obfuscatedKey: Data = Data()

  var b4Seq: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

////resolve-storage response
struct Spotify_Playplay_Proto_DownloadInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Spotify_Playplay_Proto_DownloadInfoStatus = .cdn

  var directLinks: [String] = []

  var fileID: Data = Data()

  var expiresInS: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Spotify_Playplay_Proto_Interactivity: @unchecked Sendable {}
extension Spotify_Playplay_Proto_ContentType: @unchecked Sendable {}
extension Spotify_Playplay_Proto_DownloadInfoStatus: @unchecked Sendable {}
extension Spotify_Playplay_Proto_PlayIntentRequest: @unchecked Sendable {}
extension Spotify_Playplay_Proto_PlayIntentResponse: @unchecked Sendable {}
extension Spotify_Playplay_Proto_DownloadInfoResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "spotify.playplay.proto"

extension Spotify_Playplay_Proto_Interactivity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_INTERACTIVITY"),
    1: .same(proto: "INTERACTIVE"),
    2: .same(proto: "DOWNLOAD"),
  ]
}

extension Spotify_Playplay_Proto_ContentType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CONTENT_TYPE"),
    1: .same(proto: "AUDIO_TRACK"),
    2: .same(proto: "AUDIO_EPISODE"),
    3: .same(proto: "AUDIO_ADD"),
  ]
}

extension Spotify_Playplay_Proto_DownloadInfoStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CDN"),
    1: .same(proto: "STORAGE"),
    3: .same(proto: "RESTRICTED"),
  ]
}

extension Spotify_Playplay_Proto_PlayIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayIntentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "token"),
    3: .standard(proto: "cache_id"),
    4: .same(proto: "interactivity"),
    5: .standard(proto: "content_type"),
    6: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.token) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._cacheID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.interactivity) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.contentType) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularBytesField(value: self.token, fieldNumber: 2)
    }
    try { if let v = self._cacheID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    } }()
    if self.interactivity != .unknownInteractivity {
      try visitor.visitSingularEnumField(value: self.interactivity, fieldNumber: 4)
    }
    if self.contentType != .unknownContentType {
      try visitor.visitSingularEnumField(value: self.contentType, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spotify_Playplay_Proto_PlayIntentRequest, rhs: Spotify_Playplay_Proto_PlayIntentRequest) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.token != rhs.token {return false}
    if lhs._cacheID != rhs._cacheID {return false}
    if lhs.interactivity != rhs.interactivity {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Playplay_Proto_PlayIntentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayIntentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "obfuscated_key"),
    2: .standard(proto: "b4_seq"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.obfuscatedKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.b4Seq) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.obfuscatedKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.obfuscatedKey, fieldNumber: 1)
    }
    if !self.b4Seq.isEmpty {
      try visitor.visitSingularBytesField(value: self.b4Seq, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spotify_Playplay_Proto_PlayIntentResponse, rhs: Spotify_Playplay_Proto_PlayIntentResponse) -> Bool {
    if lhs.obfuscatedKey != rhs.obfuscatedKey {return false}
    if lhs.b4Seq != rhs.b4Seq {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spotify_Playplay_Proto_DownloadInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownloadInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "direct_links"),
    4: .standard(proto: "file_id"),
    5: .standard(proto: "expires_in_s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.directLinks) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.fileID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.expiresInS) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .cdn {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.directLinks.isEmpty {
      try visitor.visitRepeatedStringField(value: self.directLinks, fieldNumber: 2)
    }
    if !self.fileID.isEmpty {
      try visitor.visitSingularBytesField(value: self.fileID, fieldNumber: 4)
    }
    if self.expiresInS != 0 {
      try visitor.visitSingularInt32Field(value: self.expiresInS, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spotify_Playplay_Proto_DownloadInfoResponse, rhs: Spotify_Playplay_Proto_DownloadInfoResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.directLinks != rhs.directLinks {return false}
    if lhs.fileID != rhs.fileID {return false}
    if lhs.expiresInS != rhs.expiresInS {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
