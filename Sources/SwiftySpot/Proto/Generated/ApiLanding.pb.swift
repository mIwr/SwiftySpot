// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ApiLanding.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SPDacRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uri: String = String()

  var featureRequest: SwiftProtobuf.Google_Protobuf_Any {
    get {return _featureRequest ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_featureRequest = newValue}
  }
  /// Returns true if `featureRequest` has been explicitly set.
  var hasFeatureRequest: Bool {return self._featureRequest != nil}
  /// Clears the value of `featureRequest`. Subsequent reads from it will return its default value.
  mutating func clearFeatureRequest() {self._featureRequest = nil}

  var clientInfo: SPDacRequest.ClientInfo {
    get {return _clientInfo ?? SPDacRequest.ClientInfo()}
    set {_clientInfo = newValue}
  }
  /// Returns true if `clientInfo` has been explicitly set.
  var hasClientInfo: Bool {return self._clientInfo != nil}
  /// Clears the value of `clientInfo`. Subsequent reads from it will return its default value.
  mutating func clearClientInfo() {self._clientInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ClientInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var appName: String = String()

    var version: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _featureRequest: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _clientInfo: SPDacRequest.ClientInfo? = nil
}

struct SPDacResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: SwiftProtobuf.Google_Protobuf_Any {
    get {return _component ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return self._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {self._component = nil}

  var homeLoggingSpanID: String {
    get {return _homeLoggingSpanID ?? String()}
    set {_homeLoggingSpanID = newValue}
  }
  /// Returns true if `homeLoggingSpanID` has been explicitly set.
  var hasHomeLoggingSpanID: Bool {return self._homeLoggingSpanID != nil}
  /// Clears the value of `homeLoggingSpanID`. Subsequent reads from it will return its default value.
  mutating func clearHomeLoggingSpanID() {self._homeLoggingSpanID = nil}

  var isHomeFallback: Bool {
    get {return _isHomeFallback ?? false}
    set {_isHomeFallback = newValue}
  }
  /// Returns true if `isHomeFallback` has been explicitly set.
  var hasIsHomeFallback: Bool {return self._isHomeFallback != nil}
  /// Clears the value of `isHomeFallback`. Subsequent reads from it will return its default value.
  mutating func clearIsHomeFallback() {self._isHomeFallback = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _component: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _homeLoggingSpanID: String? = nil
  fileprivate var _isHomeFallback: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SPDacRequest: @unchecked Sendable {}
extension SPDacRequest.ClientInfo: @unchecked Sendable {}
extension SPDacResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.spotify.dac.api.v1.proto"

extension SPDacRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DacRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "uri"),
    3: .standard(proto: "feature_request"),
    4: .standard(proto: "client_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._featureRequest) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._clientInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    try { if let v = self._featureRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._clientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPDacRequest, rhs: SPDacRequest) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs._featureRequest != rhs._featureRequest {return false}
    if lhs._clientInfo != rhs._clientInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPDacRequest.ClientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SPDacRequest.protoMessageName + ".ClientInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_name"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPDacRequest.ClientInfo, rhs: SPDacRequest.ClientInfo) -> Bool {
    if lhs.appName != rhs.appName {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPDacResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DacResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "component"),
    3: .standard(proto: "home_logging_span_id"),
    4: .standard(proto: "is_home_fallback"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._component) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._homeLoggingSpanID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._isHomeFallback) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._component {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._homeLoggingSpanID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._isHomeFallback {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPDacResponse, rhs: SPDacResponse) -> Bool {
    if lhs._component != rhs._component {return false}
    if lhs._homeLoggingSpanID != rhs._homeLoggingSpanID {return false}
    if lhs._isHomeFallback != rhs._isHomeFallback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
