// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: LyricsModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///Lyrics content type
public enum SPLyricsSyncType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unsynced // = 0
  case lineSynced // = 1
  case syllableSynced // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unsynced
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unsynced
    case 1: self = .lineSynced
    case 2: self = .syllableSynced
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unsynced: return 0
    case .lineSynced: return 1
    case .syllableSynced: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension SPLyricsSyncType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [SPLyricsSyncType] = [
    .unsynced,
    .lineSynced,
    .syllableSynced,
  ]
}

#endif  // swift(>=4.2)

///Represents color parameters for lyrics content view
public struct SPLyricsColorData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///View background color
  public var background: Int32 = 0

  ///Text general color
  public var text: Int32 = 0

  ///Currently playing lyrics text color
  public var highlightText: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Represents alternative lyrics variant
public struct SPLyricsAlternative {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Lyrics language
  public var language: String = String()

  ///Lyrics lines
  public var lines: [SPLyricsLine] = []

  ///Language type is Right-To-Left
  public var rtlLang: Bool {
    get {return _rtlLang ?? false}
    set {_rtlLang = newValue}
  }
  /// Returns true if `rtlLang` has been explicitly set.
  public var hasRtlLang: Bool {return self._rtlLang != nil}
  /// Clears the value of `rtlLang`. Subsequent reads from it will return its default value.
  public mutating func clearRtlLang() {self._rtlLang = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rtlLang: Bool? = nil
}

///Represents a single lyrics line with timestamp, text info and syllables
public struct SPLyricsLine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Line start timestamp in millis during playback
  public var startTimeMs: Int64 = 0

  ///Line text info
  public var text: String = String()

  ///Line syllables
  public var syllables: [SPLyricsSyllable] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Represents syllable of the lyrics line
public struct SPLyricsSyllable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Syllable start timestamp in millis during playback
  public var startTimeMs: Int64 = 0

  ///Syllable chars count
  public var numChars: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SPLyricsSyncType: @unchecked Sendable {}
extension SPLyricsColorData: @unchecked Sendable {}
extension SPLyricsAlternative: @unchecked Sendable {}
extension SPLyricsLine: @unchecked Sendable {}
extension SPLyricsSyllable: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.spotify.lyrics.endpointretrofit.proto"

extension SPLyricsSyncType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSYNCED"),
    1: .same(proto: "LINE_SYNCED"),
    2: .same(proto: "SYLLABLE_SYNCED"),
  ]
}

extension SPLyricsColorData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColorData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "background"),
    2: .same(proto: "text"),
    3: .standard(proto: "highlight_text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.background) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.text) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.highlightText) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.background != 0 {
      try visitor.visitSingularInt32Field(value: self.background, fieldNumber: 1)
    }
    if self.text != 0 {
      try visitor.visitSingularInt32Field(value: self.text, fieldNumber: 2)
    }
    if self.highlightText != 0 {
      try visitor.visitSingularInt32Field(value: self.highlightText, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPLyricsColorData, rhs: SPLyricsColorData) -> Bool {
    if lhs.background != rhs.background {return false}
    if lhs.text != rhs.text {return false}
    if lhs.highlightText != rhs.highlightText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPLyricsAlternative: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Alternative"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .same(proto: "lines"),
    3: .standard(proto: "rtl_lang"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.language) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.lines) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._rtlLang) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.language.isEmpty {
      try visitor.visitSingularStringField(value: self.language, fieldNumber: 1)
    }
    if !self.lines.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lines, fieldNumber: 2)
    }
    try { if let v = self._rtlLang {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPLyricsAlternative, rhs: SPLyricsAlternative) -> Bool {
    if lhs.language != rhs.language {return false}
    if lhs.lines != rhs.lines {return false}
    if lhs._rtlLang != rhs._rtlLang {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPLyricsLine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Line"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time_ms"),
    2: .same(proto: "text"),
    3: .same(proto: "syllables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.startTimeMs) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.syllables) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startTimeMs != 0 {
      try visitor.visitSingularInt64Field(value: self.startTimeMs, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.syllables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.syllables, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPLyricsLine, rhs: SPLyricsLine) -> Bool {
    if lhs.startTimeMs != rhs.startTimeMs {return false}
    if lhs.text != rhs.text {return false}
    if lhs.syllables != rhs.syllables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPLyricsSyllable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Syllable"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time_ms"),
    2: .standard(proto: "num_chars"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.startTimeMs) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.numChars) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startTimeMs != 0 {
      try visitor.visitSingularInt64Field(value: self.startTimeMs, fieldNumber: 1)
    }
    if self.numChars != 0 {
      try visitor.visitSingularInt64Field(value: self.numChars, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPLyricsSyllable, rhs: SPLyricsSyllable) -> Bool {
    if lhs.startTimeMs != rhs.startTimeMs {return false}
    if lhs.numChars != rhs.numChars {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
