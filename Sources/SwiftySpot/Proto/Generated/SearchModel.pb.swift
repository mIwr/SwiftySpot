// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SearchModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///Restful banner on search
public struct SPBannerContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Banner ID
  public var id: String = String()

  ///Banner title
  public var title: String = String()

  ///Banner description text
  public var desc: String = String()

  ///Action button title
  public var buttonTitle: String = String()

  ///Action button url launch on press
  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Related search query
public struct SPSearchRelated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Search query
  public var text: String = String()

  ///Entity navigation uri
  public var uri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Search suggestion
public struct SPSearchAutocompleteQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Suggestion entity naviagtion uri
  public var uri: String = String()

  ///Suggestion snippet
  public var snippet: SPSearchSnippet {
    get {return _snippet ?? SPSearchSnippet()}
    set {_snippet = newValue}
  }
  /// Returns true if `snippet` has been explicitly set.
  public var hasSnippet: Bool {return self._snippet != nil}
  /// Clears the value of `snippet`. Subsequent reads from it will return its default value.
  public mutating func clearSnippet() {self._snippet = nil}

  ///Suggestion text
  public var chipText: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _snippet: SPSearchSnippet? = nil
}

///Search snippet
public struct SPSearchSnippet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Snippet segments
  public var segments: [SPSearchSegment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Search query segment
public struct SPSearchSegment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Query segment value
  public var value: String = String()

  ///Match flag
  public var matched: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Artist search match
public struct SPSearchArtist {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Artist is verified flag
  public var verified: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Album search match
public struct SPSearchAlbum {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Artists-authors
  public var artistNames: [String] = []

  ///Album type
  public var type: Int32 = 0

  ///Album release year
  public var releaseYear: Int32 = 0

  ///State type
  public var state: Int32 = 0

  ///Create timestamp
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var userCountryReleaseIsoTime: String {
    get {return _userCountryReleaseIsoTime ?? String()}
    set {_userCountryReleaseIsoTime = newValue}
  }
  /// Returns true if `userCountryReleaseIsoTime` has been explicitly set.
  public var hasUserCountryReleaseIsoTime: Bool {return self._userCountryReleaseIsoTime != nil}
  /// Clears the value of `userCountryReleaseIsoTime`. Subsequent reads from it will return its default value.
  public mutating func clearUserCountryReleaseIsoTime() {self._userCountryReleaseIsoTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _userCountryReleaseIsoTime: String? = nil
}

///Playlist search match
public struct SPSearchPlaylist {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///User-related playlist flag
  public var personalized: Bool = false

  ///Spotify is author flag
  public var ownedBySpotify: Bool = false

  ///Tracks count
  public var tracksCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Track search match
public struct SPSearchTrack {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Track is explicit flag
  public var explicit: Bool = false

  ///Track is windowed flag
  public var windowed: Bool {
    get {return _windowed ?? false}
    set {_windowed = newValue}
  }
  /// Returns true if `windowed` has been explicitly set.
  public var hasWindowed: Bool {return self._windowed != nil}
  /// Clears the value of `windowed`. Subsequent reads from it will return its default value.
  public mutating func clearWindowed() {self._windowed = nil}

  ///Track album info
  public var album: SPRelatedEntity {
    get {return _album ?? SPRelatedEntity()}
    set {_album = newValue}
  }
  /// Returns true if `album` has been explicitly set.
  public var hasAlbum: Bool {return self._album != nil}
  /// Clears the value of `album`. Subsequent reads from it will return its default value.
  public mutating func clearAlbum() {self._album = nil}

  ///Track authors info
  public var artists: [SPRelatedEntity] = []

  ///TODO
  public var mogef19: Bool {
    get {return _mogef19 ?? false}
    set {_mogef19 = newValue}
  }
  /// Returns true if `mogef19` has been explicitly set.
  public var hasMogef19: Bool {return self._mogef19 != nil}
  /// Clears the value of `mogef19`. Subsequent reads from it will return its default value.
  public mutating func clearMogef19() {self._mogef19 = nil}

  ///Lyrics flag
  public var lyricsMatch: Bool {
    get {return _lyricsMatch ?? false}
    set {_lyricsMatch = newValue}
  }
  /// Returns true if `lyricsMatch` has been explicitly set.
  public var hasLyricsMatch: Bool {return self._lyricsMatch != nil}
  /// Clears the value of `lyricsMatch`. Subsequent reads from it will return its default value.
  public mutating func clearLyricsMatch() {self._lyricsMatch = nil}

  ///Search on demand
  public var onDemand: SPOnDemand {
    get {return _onDemand ?? SPOnDemand()}
    set {_onDemand = newValue}
  }
  /// Returns true if `onDemand` has been explicitly set.
  public var hasOnDemand: Bool {return self._onDemand != nil}
  /// Clears the value of `onDemand`. Subsequent reads from it will return its default value.
  public mutating func clearOnDemand() {self._onDemand = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _windowed: Bool? = nil
  fileprivate var _album: SPRelatedEntity? = nil
  fileprivate var _mogef19: Bool? = nil
  fileprivate var _lyricsMatch: Bool? = nil
  fileprivate var _onDemand: SPOnDemand? = nil
}

///Audio show search match
public struct SPSearchAudioShow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Publisher name
  public var publisherName: String = String()

  ///Show contains music and talk flag
  public var musicAndTalk: Bool = false

  ///Show category
  public var category: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Genre search match
public struct SPSearchGenre {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Profile search match info
public struct SPSearchProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Profile verified flag
  public var verified: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Audiobook search match
public struct SPSearchAudiobook {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Authors
  public var authorNames: [String] = []

  ///Narrators
  public var narratorNames: [String] = []

  ///Audiobook is explicit flag
  public var explicit: Bool = false

  ///Audiobook duration
  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  ///Audiobook description
  public var desc: String = String()

  ///Audio book search access settings
  public var access: SPAccess {
    get {return _access ?? SPAccess()}
    set {_access = newValue}
  }
  /// Returns true if `access` has been explicitly set.
  public var hasAccess: Bool {return self._access != nil}
  /// Clears the value of `access`. Subsequent reads from it will return its default value.
  public mutating func clearAccess() {self._access = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _access: SPAccess? = nil
}

///Search object access settings
public struct SPAccess {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///TODO
  public var signifier: String = String()

  ///Unlocked for play
  public var unlocked: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Related entity for search match
public struct SPRelatedEntity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Entity navigation uri
  public var uri: String = String()

  ///Entity name
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Search on demand match
public struct SPOnDemand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Track navigation uri
  public var trackUri: String = String()

  ///Playlist navigation uri
  public var playlistUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SPBannerContent: @unchecked Sendable {}
extension SPSearchRelated: @unchecked Sendable {}
extension SPSearchAutocompleteQuery: @unchecked Sendable {}
extension SPSearchSnippet: @unchecked Sendable {}
extension SPSearchSegment: @unchecked Sendable {}
extension SPSearchArtist: @unchecked Sendable {}
extension SPSearchAlbum: @unchecked Sendable {}
extension SPSearchPlaylist: @unchecked Sendable {}
extension SPSearchTrack: @unchecked Sendable {}
extension SPSearchAudioShow: @unchecked Sendable {}
extension SPSearchGenre: @unchecked Sendable {}
extension SPSearchProfile: @unchecked Sendable {}
extension SPSearchAudiobook: @unchecked Sendable {}
extension SPAccess: @unchecked Sendable {}
extension SPRelatedEntity: @unchecked Sendable {}
extension SPOnDemand: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.spotify.searchview.proto"

extension SPBannerContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BannerContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "desc"),
    4: .standard(proto: "button_title"),
    5: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.buttonTitle) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 3)
    }
    if !self.buttonTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.buttonTitle, fieldNumber: 4)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPBannerContent, rhs: SPBannerContent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.buttonTitle != rhs.buttonTitle {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchRelated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchRelated"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchRelated, rhs: SPSearchRelated) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchAutocompleteQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAutocompleteQuery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "snippet"),
    100: .standard(proto: "chip_text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._snippet) }()
      case 100: try { try decoder.decodeSingularStringField(value: &self.chipText) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try { if let v = self._snippet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.chipText.isEmpty {
      try visitor.visitSingularStringField(value: self.chipText, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchAutocompleteQuery, rhs: SPSearchAutocompleteQuery) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs._snippet != rhs._snippet {return false}
    if lhs.chipText != rhs.chipText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchSnippet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchSnippet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "segments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.segments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.segments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchSnippet, rhs: SPSearchSnippet) -> Bool {
    if lhs.segments != rhs.segments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchSegment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchSegment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "matched"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.matched) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    if self.matched != false {
      try visitor.visitSingularBoolField(value: self.matched, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchSegment, rhs: SPSearchSegment) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.matched != rhs.matched {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchArtist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchArtist"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "verified"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.verified) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.verified != false {
      try visitor.visitSingularBoolField(value: self.verified, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchArtist, rhs: SPSearchArtist) -> Bool {
    if lhs.verified != rhs.verified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchAlbum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAlbum"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "artist_names"),
    2: .same(proto: "type"),
    3: .standard(proto: "release_year"),
    4: .same(proto: "state"),
    5: .same(proto: "timestamp"),
    6: .standard(proto: "user_country_release_iso_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.artistNames) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.releaseYear) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.state) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._userCountryReleaseIsoTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.artistNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.artistNames, fieldNumber: 1)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 2)
    }
    if self.releaseYear != 0 {
      try visitor.visitSingularInt32Field(value: self.releaseYear, fieldNumber: 3)
    }
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 4)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._userCountryReleaseIsoTime {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchAlbum, rhs: SPSearchAlbum) -> Bool {
    if lhs.artistNames != rhs.artistNames {return false}
    if lhs.type != rhs.type {return false}
    if lhs.releaseYear != rhs.releaseYear {return false}
    if lhs.state != rhs.state {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._userCountryReleaseIsoTime != rhs._userCountryReleaseIsoTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchPlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchPlaylist"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "personalized"),
    2: .standard(proto: "owned_by_spotify"),
    3: .standard(proto: "tracks_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.personalized) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.ownedBySpotify) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.tracksCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.personalized != false {
      try visitor.visitSingularBoolField(value: self.personalized, fieldNumber: 1)
    }
    if self.ownedBySpotify != false {
      try visitor.visitSingularBoolField(value: self.ownedBySpotify, fieldNumber: 2)
    }
    if self.tracksCount != 0 {
      try visitor.visitSingularInt32Field(value: self.tracksCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchPlaylist, rhs: SPSearchPlaylist) -> Bool {
    if lhs.personalized != rhs.personalized {return false}
    if lhs.ownedBySpotify != rhs.ownedBySpotify {return false}
    if lhs.tracksCount != rhs.tracksCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchTrack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchTrack"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "explicit"),
    2: .same(proto: "windowed"),
    3: .same(proto: "album"),
    4: .same(proto: "artists"),
    6: .same(proto: "mogef19"),
    7: .standard(proto: "lyrics_match"),
    8: .standard(proto: "on_demand"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.explicit) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._windowed) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._album) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.artists) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._mogef19) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._lyricsMatch) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._onDemand) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.explicit != false {
      try visitor.visitSingularBoolField(value: self.explicit, fieldNumber: 1)
    }
    try { if let v = self._windowed {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._album {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.artists.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.artists, fieldNumber: 4)
    }
    try { if let v = self._mogef19 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._lyricsMatch {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._onDemand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchTrack, rhs: SPSearchTrack) -> Bool {
    if lhs.explicit != rhs.explicit {return false}
    if lhs._windowed != rhs._windowed {return false}
    if lhs._album != rhs._album {return false}
    if lhs.artists != rhs.artists {return false}
    if lhs._mogef19 != rhs._mogef19 {return false}
    if lhs._lyricsMatch != rhs._lyricsMatch {return false}
    if lhs._onDemand != rhs._onDemand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchAudioShow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAudioShow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "publisher_name"),
    3: .standard(proto: "music_and_talk"),
    4: .same(proto: "category"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.publisherName) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.musicAndTalk) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.category) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publisherName.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherName, fieldNumber: 1)
    }
    if self.musicAndTalk != false {
      try visitor.visitSingularBoolField(value: self.musicAndTalk, fieldNumber: 3)
    }
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchAudioShow, rhs: SPSearchAudioShow) -> Bool {
    if lhs.publisherName != rhs.publisherName {return false}
    if lhs.musicAndTalk != rhs.musicAndTalk {return false}
    if lhs.category != rhs.category {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchGenre: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchGenre"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchGenre, rhs: SPSearchGenre) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchProfile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "verified"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.verified) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.verified != false {
      try visitor.visitSingularBoolField(value: self.verified, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchProfile, rhs: SPSearchProfile) -> Bool {
    if lhs.verified != rhs.verified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSearchAudiobook: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchAudiobook"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "author_names"),
    2: .standard(proto: "narrator_names"),
    3: .same(proto: "explicit"),
    4: .same(proto: "duration"),
    5: .same(proto: "desc"),
    6: .same(proto: "access"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.authorNames) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.narratorNames) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.explicit) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._access) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.authorNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authorNames, fieldNumber: 1)
    }
    if !self.narratorNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.narratorNames, fieldNumber: 2)
    }
    if self.explicit != false {
      try visitor.visitSingularBoolField(value: self.explicit, fieldNumber: 3)
    }
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 5)
    }
    try { if let v = self._access {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPSearchAudiobook, rhs: SPSearchAudiobook) -> Bool {
    if lhs.authorNames != rhs.authorNames {return false}
    if lhs.narratorNames != rhs.narratorNames {return false}
    if lhs.explicit != rhs.explicit {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs._access != rhs._access {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPAccess: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Access"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signifier"),
    2: .same(proto: "unlocked"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.signifier) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.unlocked) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signifier.isEmpty {
      try visitor.visitSingularStringField(value: self.signifier, fieldNumber: 1)
    }
    if self.unlocked != false {
      try visitor.visitSingularBoolField(value: self.unlocked, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPAccess, rhs: SPAccess) -> Bool {
    if lhs.signifier != rhs.signifier {return false}
    if lhs.unlocked != rhs.unlocked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPRelatedEntity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RelatedEntity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPRelatedEntity, rhs: SPRelatedEntity) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPOnDemand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OnDemand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_uri"),
    2: .standard(proto: "playlist_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.trackUri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.playlistUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trackUri.isEmpty {
      try visitor.visitSingularStringField(value: self.trackUri, fieldNumber: 1)
    }
    if !self.playlistUri.isEmpty {
      try visitor.visitSingularStringField(value: self.playlistUri, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: SPOnDemand, rhs: SPOnDemand) -> Bool {
    if lhs.trackUri != rhs.trackUri {return false}
    if lhs.playlistUri != rhs.playlistUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
