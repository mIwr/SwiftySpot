// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Signup.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SPUserGender: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknownUserGender // = 0
  case male // = 1
  case female // = 2
  case nonBinary // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownUserGender
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownUserGender
    case 1: self = .male
    case 2: self = .female
    case 3: self = .nonBinary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownUserGender: return 0
    case .male: return 1
    case .female: return 2
    case .nonBinary: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SPUserGender] = [
    .unknownUserGender,
    .male,
    .female,
    .nonBinary,
  ]

}

enum SPCapability: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknownCapability // = 0
  case webInteractionV1 // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownCapability
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownCapability
    case 1: self = .webInteractionV1
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownCapability: return 0
    case .webInteractionV1: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [SPCapability] = [
    .unknownCapability,
    .webInteractionV1,
  ]

}

struct SPCreateAccountRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var callbackUri: String {
    get {return _storage._callbackUri}
    set {_uniqueStorage()._callbackUri = newValue}
  }

  var details: SPAccountDetails {
    get {return _storage._details ?? SPAccountDetails()}
    set {_uniqueStorage()._details = newValue}
  }
  /// Returns true if `details` has been explicitly set.
  var hasDetails: Bool {return _storage._details != nil}
  /// Clears the value of `details`. Subsequent reads from it will return its default value.
  mutating func clearDetails() {_uniqueStorage()._details = nil}

  var clientInfo: SPSignupClientInfo {
    get {return _storage._clientInfo ?? SPSignupClientInfo()}
    set {_uniqueStorage()._clientInfo = newValue}
  }
  /// Returns true if `clientInfo` has been explicitly set.
  var hasClientInfo: Bool {return _storage._clientInfo != nil}
  /// Clears the value of `clientInfo`. Subsequent reads from it will return its default value.
  mutating func clearClientInfo() {_uniqueStorage()._clientInfo = nil}

  var tracking: SPTracking {
    get {return _storage._tracking ?? SPTracking()}
    set {_uniqueStorage()._tracking = newValue}
  }
  /// Returns true if `tracking` has been explicitly set.
  var hasTracking: Bool {return _storage._tracking != nil}
  /// Clears the value of `tracking`. Subsequent reads from it will return its default value.
  mutating func clearTracking() {_uniqueStorage()._tracking = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SPAccountDetails: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var displayName: String = String()

  var birthdate: String = String()

  var gender: SPUserGender = .unknownUserGender

  var consentFlags: SPConsentFlags {
    get {return _consentFlags ?? SPConsentFlags()}
    set {_consentFlags = newValue}
  }
  /// Returns true if `consentFlags` has been explicitly set.
  var hasConsentFlags: Bool {return self._consentFlags != nil}
  /// Clears the value of `consentFlags`. Subsequent reads from it will return its default value.
  mutating func clearConsentFlags() {self._consentFlags = nil}

  var identifier: SPEmailAndPasswordIdentifier {
    get {return _identifier ?? SPEmailAndPasswordIdentifier()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _consentFlags: SPConsentFlags? = nil
  fileprivate var _identifier: SPEmailAndPasswordIdentifier? = nil
}

struct SPConsentFlags: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eulaAgreed: Bool = false

  var collectInfo: Bool = false

  var sendEmail: Bool = false

  var thirdPartyEmail: Bool = false

  var pushNotificaitons: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPEmailAndPasswordIdentifier: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var email: String = String()

  var password: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPSignupClientInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signupKey: String = String()

  ///device CPU info. Example value: Android-ARM
  var platform: String = String()

  var appVersion: String = String()

  var capabilities: [SPCapability] = []

  ///Installation ID
  var deviceID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPTracking: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Client mobile
  var creationPoint: String = String()

  var creationFlow: String = String()

  var referrer: String = String()

  var partner: String = String()

  var createdByPartner: String = String()

  ///Mobile product test field
  var test: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPCreateAccountResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resultCase: SPCreateAccountResponse.OneOf_ResultCase? = nil

  var success: SPCreateAccountSuccessResponse {
    get {
      if case .success(let v)? = resultCase {return v}
      return SPCreateAccountSuccessResponse()
    }
    set {resultCase = .success(newValue)}
  }

  var error: SPCreateAccountErrorResponse {
    get {
      if case .error(let v)? = resultCase {return v}
      return SPCreateAccountErrorResponse()
    }
    set {resultCase = .error(newValue)}
  }

  var challenge: SPCreateAccountChallengeResponse {
    get {
      if case .challenge(let v)? = resultCase {return v}
      return SPCreateAccountChallengeResponse()
    }
    set {resultCase = .challenge(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ResultCase: Equatable, Sendable {
    case success(SPCreateAccountSuccessResponse)
    case error(SPCreateAccountErrorResponse)
    case challenge(SPCreateAccountChallengeResponse)

  }

  init() {}
}

struct SPCreateAccountSuccessResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var loginToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPCreateAccountErrorResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var details: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPCreateAccountChallengeResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPCompleteAccountCreationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: String = String()

  var requestID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPCompleteAccountCreationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resultCase: SPCompleteAccountCreationResponse.OneOf_ResultCase? = nil

  var success: SPCompleteAccountCreationSuccessResponse {
    get {
      if case .success(let v)? = resultCase {return v}
      return SPCompleteAccountCreationSuccessResponse()
    }
    set {resultCase = .success(newValue)}
  }

  var error: SPCompleteAccountCreationErrorResponse {
    get {
      if case .error(let v)? = resultCase {return v}
      return SPCompleteAccountCreationErrorResponse()
    }
    set {resultCase = .error(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ResultCase: Equatable, Sendable {
    case success(SPCompleteAccountCreationSuccessResponse)
    case error(SPCompleteAccountCreationErrorResponse)

  }

  init() {}
}

struct SPCompleteAccountCreationSuccessResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var loginToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SPCompleteAccountCreationErrorResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var details: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.spotify.signup.v2.proto"

extension SPUserGender: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_USER_GENDER"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
    3: .same(proto: "NON_BINARY"),
  ]
}

extension SPCapability: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_CAPABILITY"),
    1: .same(proto: "CAPABILITY_WEB_INTERACTION_V1"),
  ]
}

extension SPCreateAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "callback_uri"),
    2: .same(proto: "details"),
    3: .standard(proto: "client_info"),
    4: .same(proto: "tracking"),
  ]

  fileprivate class _StorageClass {
    var _callbackUri: String = String()
    var _details: SPAccountDetails? = nil
    var _clientInfo: SPSignupClientInfo? = nil
    var _tracking: SPTracking? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _callbackUri = source._callbackUri
      _details = source._details
      _clientInfo = source._clientInfo
      _tracking = source._tracking
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._callbackUri) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._details) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._clientInfo) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._tracking) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._callbackUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._callbackUri, fieldNumber: 1)
      }
      try { if let v = _storage._details {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._clientInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._tracking {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCreateAccountRequest, rhs: SPCreateAccountRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._callbackUri != rhs_storage._callbackUri {return false}
        if _storage._details != rhs_storage._details {return false}
        if _storage._clientInfo != rhs_storage._clientInfo {return false}
        if _storage._tracking != rhs_storage._tracking {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPAccountDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "display_name"),
    2: .same(proto: "birthdate"),
    3: .same(proto: "gender"),
    4: .standard(proto: "consent_flags"),
    101: .same(proto: "identifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.displayName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.birthdate) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.gender) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._consentFlags) }()
      case 101: try { try decoder.decodeSingularMessageField(value: &self._identifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 1)
    }
    if !self.birthdate.isEmpty {
      try visitor.visitSingularStringField(value: self.birthdate, fieldNumber: 2)
    }
    if self.gender != .unknownUserGender {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 3)
    }
    try { if let v = self._consentFlags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._identifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPAccountDetails, rhs: SPAccountDetails) -> Bool {
    if lhs.displayName != rhs.displayName {return false}
    if lhs.birthdate != rhs.birthdate {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs._consentFlags != rhs._consentFlags {return false}
    if lhs._identifier != rhs._identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPConsentFlags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsentFlags"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "eula_agreed"),
    2: .standard(proto: "collect_info"),
    3: .standard(proto: "send_email"),
    4: .standard(proto: "third_party_email"),
    5: .standard(proto: "push_notificaitons"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.eulaAgreed) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.collectInfo) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.sendEmail) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.thirdPartyEmail) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.pushNotificaitons) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eulaAgreed != false {
      try visitor.visitSingularBoolField(value: self.eulaAgreed, fieldNumber: 1)
    }
    if self.collectInfo != false {
      try visitor.visitSingularBoolField(value: self.collectInfo, fieldNumber: 2)
    }
    if self.sendEmail != false {
      try visitor.visitSingularBoolField(value: self.sendEmail, fieldNumber: 3)
    }
    if self.thirdPartyEmail != false {
      try visitor.visitSingularBoolField(value: self.thirdPartyEmail, fieldNumber: 4)
    }
    if self.pushNotificaitons != false {
      try visitor.visitSingularBoolField(value: self.pushNotificaitons, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPConsentFlags, rhs: SPConsentFlags) -> Bool {
    if lhs.eulaAgreed != rhs.eulaAgreed {return false}
    if lhs.collectInfo != rhs.collectInfo {return false}
    if lhs.sendEmail != rhs.sendEmail {return false}
    if lhs.thirdPartyEmail != rhs.thirdPartyEmail {return false}
    if lhs.pushNotificaitons != rhs.pushNotificaitons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPEmailAndPasswordIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EmailAndPasswordIdentifier"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.password) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPEmailAndPasswordIdentifier, rhs: SPEmailAndPasswordIdentifier) -> Bool {
    if lhs.email != rhs.email {return false}
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPSignupClientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignupClientInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signup_key"),
    2: .same(proto: "platform"),
    3: .standard(proto: "app_version"),
    4: .same(proto: "capabilities"),
    5: .standard(proto: "device_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.signupKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.capabilities) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signupKey.isEmpty {
      try visitor.visitSingularStringField(value: self.signupKey, fieldNumber: 1)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 2)
    }
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 3)
    }
    if !self.capabilities.isEmpty {
      try visitor.visitPackedEnumField(value: self.capabilities, fieldNumber: 4)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPSignupClientInfo, rhs: SPSignupClientInfo) -> Bool {
    if lhs.signupKey != rhs.signupKey {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.capabilities != rhs.capabilities {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPTracking: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Tracking"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "creation_point"),
    2: .standard(proto: "creation_flow"),
    3: .same(proto: "referrer"),
    4: .same(proto: "partner"),
    5: .standard(proto: "created_by_partner"),
    6: .same(proto: "test"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creationPoint) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.creationFlow) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.referrer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.partner) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.createdByPartner) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.test) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creationPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.creationPoint, fieldNumber: 1)
    }
    if !self.creationFlow.isEmpty {
      try visitor.visitSingularStringField(value: self.creationFlow, fieldNumber: 2)
    }
    if !self.referrer.isEmpty {
      try visitor.visitSingularStringField(value: self.referrer, fieldNumber: 3)
    }
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 4)
    }
    if !self.createdByPartner.isEmpty {
      try visitor.visitSingularStringField(value: self.createdByPartner, fieldNumber: 5)
    }
    if !self.test.isEmpty {
      try visitor.visitSingularStringField(value: self.test, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPTracking, rhs: SPTracking) -> Bool {
    if lhs.creationPoint != rhs.creationPoint {return false}
    if lhs.creationFlow != rhs.creationFlow {return false}
    if lhs.referrer != rhs.referrer {return false}
    if lhs.partner != rhs.partner {return false}
    if lhs.createdByPartner != rhs.createdByPartner {return false}
    if lhs.test != rhs.test {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCreateAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAccountResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "error"),
    3: .same(proto: "challenge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SPCreateAccountSuccessResponse?
        var hadOneofValue = false
        if let current = self.resultCase {
          hadOneofValue = true
          if case .success(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resultCase = .success(v)
        }
      }()
      case 2: try {
        var v: SPCreateAccountErrorResponse?
        var hadOneofValue = false
        if let current = self.resultCase {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resultCase = .error(v)
        }
      }()
      case 3: try {
        var v: SPCreateAccountChallengeResponse?
        var hadOneofValue = false
        if let current = self.resultCase {
          hadOneofValue = true
          if case .challenge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resultCase = .challenge(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.resultCase {
    case .success?: try {
      guard case .success(let v)? = self.resultCase else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.resultCase else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .challenge?: try {
      guard case .challenge(let v)? = self.resultCase else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCreateAccountResponse, rhs: SPCreateAccountResponse) -> Bool {
    if lhs.resultCase != rhs.resultCase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCreateAccountSuccessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAccountSuccessResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "login_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.loginToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.loginToken.isEmpty {
      try visitor.visitSingularStringField(value: self.loginToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCreateAccountSuccessResponse, rhs: SPCreateAccountSuccessResponse) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.loginToken != rhs.loginToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCreateAccountErrorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAccountErrorResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.details) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCreateAccountErrorResponse, rhs: SPCreateAccountErrorResponse) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCreateAccountChallengeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAccountChallengeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCreateAccountChallengeResponse, rhs: SPCreateAccountChallengeResponse) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCompleteAccountCreationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompleteAccountCreationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_id"),
    2: .standard(proto: "request_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 1)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCompleteAccountCreationRequest, rhs: SPCompleteAccountCreationRequest) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCompleteAccountCreationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompleteAccountCreationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SPCompleteAccountCreationSuccessResponse?
        var hadOneofValue = false
        if let current = self.resultCase {
          hadOneofValue = true
          if case .success(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resultCase = .success(v)
        }
      }()
      case 2: try {
        var v: SPCompleteAccountCreationErrorResponse?
        var hadOneofValue = false
        if let current = self.resultCase {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.resultCase = .error(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.resultCase {
    case .success?: try {
      guard case .success(let v)? = self.resultCase else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.resultCase else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCompleteAccountCreationResponse, rhs: SPCompleteAccountCreationResponse) -> Bool {
    if lhs.resultCase != rhs.resultCase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCompleteAccountCreationSuccessResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompleteAccountCreationSuccessResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "login_token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.loginToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.loginToken.isEmpty {
      try visitor.visitSingularStringField(value: self.loginToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCompleteAccountCreationSuccessResponse, rhs: SPCompleteAccountCreationSuccessResponse) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.loginToken != rhs.loginToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SPCompleteAccountCreationErrorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompleteAccountCreationErrorResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.details) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SPCompleteAccountCreationErrorResponse, rhs: SPCompleteAccountCreationErrorResponse) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
