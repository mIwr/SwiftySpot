// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ExtendedMetadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Com_Spotify_Extendedmetadata_Proto_ExtensionType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case generic // = 1
  case assoc // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .generic
    case 2: self = .assoc
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .generic: return 1
    case .assoc: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Com_Spotify_Extendedmetadata_Proto_ExtensionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Com_Spotify_Extendedmetadata_Proto_ExtensionType] = [
    .unknown,
    .generic,
    .assoc,
  ]
}

#endif  // swift(>=4.2)

enum Com_Spotify_Extendedmetadata_Proto_ExtensionKind: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownExtension // = 0
  case canvaz // = 1
  case storylines // = 2
  case podcastTopics // = 3
  case podcastSegments // = 4
  case audioFiles // = 5
  case trackDescriptor // = 6
  case podcastCounter // = 7
  case artistV4 // = 8
  case albumV4 // = 9
  case trackV4 // = 10
  case showV4 // = 11
  case episodeV4 // = 12
  case podcastHtmlDescription // = 13
  case podcastQuotes // = 14
  case userProfile // = 15
  case canvasV1 // = 16
  case showV4Base // = 17
  case showV4EpisodesAssoc // = 18
  case trackDescriptorSignatures // = 19
  case podcastAdSegments // = 20
  case episodeTranscripts // = 21
  case podcastSubscriptions // = 22
  case extractedColor // = 23
  case podcastVirality // = 24
  case imageSparklesHack // = 25
  case podcastPopularityHack // = 26
  case automixMode // = 27
  case cuepoints // = 28
  case podcastPoll // = 29
  case episodeAccess // = 30
  case showAccess // = 31
  case podcastQna // = 32
  case clips // = 33
  case showV5 // = 34
  case episodeV5 // = 35
  case podcastCtaCards // = 36
  case podcastRating // = 37
  case displaySegments // = 38
  case greenroom // = 39
  case userCreated // = 40
  case showDescription // = 41
  case showHtmlDescription // = 42
  case showPlayability // = 43
  case episodeDescription // = 44
  case episodeHtmlDescription // = 45
  case episodePlayability // = 46
  case showEpisodesAssoc // = 47
  case clientConfig // = 48
  case playlistability // = 49
  case audiobookV5 // = 50
  case chapterV5 // = 51
  case audiobookSpecifics // = 52
  case episodeRanking // = 53
  case htmlDescription // = 54
  case creatorChannel // = 55
  case audiobookProviders // = 56
  case playTrait // = 57
  case contentWarning // = 58
  case imageCue // = 59
  case streamCount // = 60
  case audioAttributes // = 61
  case navigableTrait // = 62
  case nextBestEpisode // = 63
  case audiobookPrice // = 64
  case expressivePlaylists // = 65
  case dynamicShowEpisode // = 66
  case live // = 67
  case skipPlayed // = 68
  case adBreakFreePodcasts // = 69
  case associations // = 70
  case playlistEvaluation // = 71
  case cacheInvalidations // = 72
  case livestreamEntity // = 73
  case singleTapReactions // = 74
  case userComments // = 75
  case clientRestrictions // = 76
  case podcastGuest // = 77
  case playability // = 78
  case coverImage // = 79
  case shareTrait // = 80
  case instanceSharing // = 81
  case artistTour // = 82
  case audiobookGenre // = 83
  case concept // = 84
  case originalVideo // = 85
  case smartShuffle // = 86
  case liveEvents // = 87
  case audiobookRelations // = 88
  case homePocBasecard // = 89
  case audiobookSupplements // = 90
  case paidPodcastBanner // = 91
  case fewerAds // = 92
  case watchFeedShowExplorer // = 93
  case trackExtraDescriptors // = 94
  case trackExtraAudioAttributes // = 95
  case trackExtendedCredits // = 96
  case simpleTrait // = 97
  case audioAssociations // = 98
  case videoAssociations // = 99
  case playlistTuner // = 100
  case artistVideosEntrypoint // = 101
  case prerelease // = 102
  case contentAlternatives // = 103
  case snapshotSharing // = 105
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownExtension
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownExtension
    case 1: self = .canvaz
    case 2: self = .storylines
    case 3: self = .podcastTopics
    case 4: self = .podcastSegments
    case 5: self = .audioFiles
    case 6: self = .trackDescriptor
    case 7: self = .podcastCounter
    case 8: self = .artistV4
    case 9: self = .albumV4
    case 10: self = .trackV4
    case 11: self = .showV4
    case 12: self = .episodeV4
    case 13: self = .podcastHtmlDescription
    case 14: self = .podcastQuotes
    case 15: self = .userProfile
    case 16: self = .canvasV1
    case 17: self = .showV4Base
    case 18: self = .showV4EpisodesAssoc
    case 19: self = .trackDescriptorSignatures
    case 20: self = .podcastAdSegments
    case 21: self = .episodeTranscripts
    case 22: self = .podcastSubscriptions
    case 23: self = .extractedColor
    case 24: self = .podcastVirality
    case 25: self = .imageSparklesHack
    case 26: self = .podcastPopularityHack
    case 27: self = .automixMode
    case 28: self = .cuepoints
    case 29: self = .podcastPoll
    case 30: self = .episodeAccess
    case 31: self = .showAccess
    case 32: self = .podcastQna
    case 33: self = .clips
    case 34: self = .showV5
    case 35: self = .episodeV5
    case 36: self = .podcastCtaCards
    case 37: self = .podcastRating
    case 38: self = .displaySegments
    case 39: self = .greenroom
    case 40: self = .userCreated
    case 41: self = .showDescription
    case 42: self = .showHtmlDescription
    case 43: self = .showPlayability
    case 44: self = .episodeDescription
    case 45: self = .episodeHtmlDescription
    case 46: self = .episodePlayability
    case 47: self = .showEpisodesAssoc
    case 48: self = .clientConfig
    case 49: self = .playlistability
    case 50: self = .audiobookV5
    case 51: self = .chapterV5
    case 52: self = .audiobookSpecifics
    case 53: self = .episodeRanking
    case 54: self = .htmlDescription
    case 55: self = .creatorChannel
    case 56: self = .audiobookProviders
    case 57: self = .playTrait
    case 58: self = .contentWarning
    case 59: self = .imageCue
    case 60: self = .streamCount
    case 61: self = .audioAttributes
    case 62: self = .navigableTrait
    case 63: self = .nextBestEpisode
    case 64: self = .audiobookPrice
    case 65: self = .expressivePlaylists
    case 66: self = .dynamicShowEpisode
    case 67: self = .live
    case 68: self = .skipPlayed
    case 69: self = .adBreakFreePodcasts
    case 70: self = .associations
    case 71: self = .playlistEvaluation
    case 72: self = .cacheInvalidations
    case 73: self = .livestreamEntity
    case 74: self = .singleTapReactions
    case 75: self = .userComments
    case 76: self = .clientRestrictions
    case 77: self = .podcastGuest
    case 78: self = .playability
    case 79: self = .coverImage
    case 80: self = .shareTrait
    case 81: self = .instanceSharing
    case 82: self = .artistTour
    case 83: self = .audiobookGenre
    case 84: self = .concept
    case 85: self = .originalVideo
    case 86: self = .smartShuffle
    case 87: self = .liveEvents
    case 88: self = .audiobookRelations
    case 89: self = .homePocBasecard
    case 90: self = .audiobookSupplements
    case 91: self = .paidPodcastBanner
    case 92: self = .fewerAds
    case 93: self = .watchFeedShowExplorer
    case 94: self = .trackExtraDescriptors
    case 95: self = .trackExtraAudioAttributes
    case 96: self = .trackExtendedCredits
    case 97: self = .simpleTrait
    case 98: self = .audioAssociations
    case 99: self = .videoAssociations
    case 100: self = .playlistTuner
    case 101: self = .artistVideosEntrypoint
    case 102: self = .prerelease
    case 103: self = .contentAlternatives
    case 105: self = .snapshotSharing
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownExtension: return 0
    case .canvaz: return 1
    case .storylines: return 2
    case .podcastTopics: return 3
    case .podcastSegments: return 4
    case .audioFiles: return 5
    case .trackDescriptor: return 6
    case .podcastCounter: return 7
    case .artistV4: return 8
    case .albumV4: return 9
    case .trackV4: return 10
    case .showV4: return 11
    case .episodeV4: return 12
    case .podcastHtmlDescription: return 13
    case .podcastQuotes: return 14
    case .userProfile: return 15
    case .canvasV1: return 16
    case .showV4Base: return 17
    case .showV4EpisodesAssoc: return 18
    case .trackDescriptorSignatures: return 19
    case .podcastAdSegments: return 20
    case .episodeTranscripts: return 21
    case .podcastSubscriptions: return 22
    case .extractedColor: return 23
    case .podcastVirality: return 24
    case .imageSparklesHack: return 25
    case .podcastPopularityHack: return 26
    case .automixMode: return 27
    case .cuepoints: return 28
    case .podcastPoll: return 29
    case .episodeAccess: return 30
    case .showAccess: return 31
    case .podcastQna: return 32
    case .clips: return 33
    case .showV5: return 34
    case .episodeV5: return 35
    case .podcastCtaCards: return 36
    case .podcastRating: return 37
    case .displaySegments: return 38
    case .greenroom: return 39
    case .userCreated: return 40
    case .showDescription: return 41
    case .showHtmlDescription: return 42
    case .showPlayability: return 43
    case .episodeDescription: return 44
    case .episodeHtmlDescription: return 45
    case .episodePlayability: return 46
    case .showEpisodesAssoc: return 47
    case .clientConfig: return 48
    case .playlistability: return 49
    case .audiobookV5: return 50
    case .chapterV5: return 51
    case .audiobookSpecifics: return 52
    case .episodeRanking: return 53
    case .htmlDescription: return 54
    case .creatorChannel: return 55
    case .audiobookProviders: return 56
    case .playTrait: return 57
    case .contentWarning: return 58
    case .imageCue: return 59
    case .streamCount: return 60
    case .audioAttributes: return 61
    case .navigableTrait: return 62
    case .nextBestEpisode: return 63
    case .audiobookPrice: return 64
    case .expressivePlaylists: return 65
    case .dynamicShowEpisode: return 66
    case .live: return 67
    case .skipPlayed: return 68
    case .adBreakFreePodcasts: return 69
    case .associations: return 70
    case .playlistEvaluation: return 71
    case .cacheInvalidations: return 72
    case .livestreamEntity: return 73
    case .singleTapReactions: return 74
    case .userComments: return 75
    case .clientRestrictions: return 76
    case .podcastGuest: return 77
    case .playability: return 78
    case .coverImage: return 79
    case .shareTrait: return 80
    case .instanceSharing: return 81
    case .artistTour: return 82
    case .audiobookGenre: return 83
    case .concept: return 84
    case .originalVideo: return 85
    case .smartShuffle: return 86
    case .liveEvents: return 87
    case .audiobookRelations: return 88
    case .homePocBasecard: return 89
    case .audiobookSupplements: return 90
    case .paidPodcastBanner: return 91
    case .fewerAds: return 92
    case .watchFeedShowExplorer: return 93
    case .trackExtraDescriptors: return 94
    case .trackExtraAudioAttributes: return 95
    case .trackExtendedCredits: return 96
    case .simpleTrait: return 97
    case .audioAssociations: return 98
    case .videoAssociations: return 99
    case .playlistTuner: return 100
    case .artistVideosEntrypoint: return 101
    case .prerelease: return 102
    case .contentAlternatives: return 103
    case .snapshotSharing: return 105
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Com_Spotify_Extendedmetadata_Proto_ExtensionKind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Com_Spotify_Extendedmetadata_Proto_ExtensionKind] = [
    .unknownExtension,
    .canvaz,
    .storylines,
    .podcastTopics,
    .podcastSegments,
    .audioFiles,
    .trackDescriptor,
    .podcastCounter,
    .artistV4,
    .albumV4,
    .trackV4,
    .showV4,
    .episodeV4,
    .podcastHtmlDescription,
    .podcastQuotes,
    .userProfile,
    .canvasV1,
    .showV4Base,
    .showV4EpisodesAssoc,
    .trackDescriptorSignatures,
    .podcastAdSegments,
    .episodeTranscripts,
    .podcastSubscriptions,
    .extractedColor,
    .podcastVirality,
    .imageSparklesHack,
    .podcastPopularityHack,
    .automixMode,
    .cuepoints,
    .podcastPoll,
    .episodeAccess,
    .showAccess,
    .podcastQna,
    .clips,
    .showV5,
    .episodeV5,
    .podcastCtaCards,
    .podcastRating,
    .displaySegments,
    .greenroom,
    .userCreated,
    .showDescription,
    .showHtmlDescription,
    .showPlayability,
    .episodeDescription,
    .episodeHtmlDescription,
    .episodePlayability,
    .showEpisodesAssoc,
    .clientConfig,
    .playlistability,
    .audiobookV5,
    .chapterV5,
    .audiobookSpecifics,
    .episodeRanking,
    .htmlDescription,
    .creatorChannel,
    .audiobookProviders,
    .playTrait,
    .contentWarning,
    .imageCue,
    .streamCount,
    .audioAttributes,
    .navigableTrait,
    .nextBestEpisode,
    .audiobookPrice,
    .expressivePlaylists,
    .dynamicShowEpisode,
    .live,
    .skipPlayed,
    .adBreakFreePodcasts,
    .associations,
    .playlistEvaluation,
    .cacheInvalidations,
    .livestreamEntity,
    .singleTapReactions,
    .userComments,
    .clientRestrictions,
    .podcastGuest,
    .playability,
    .coverImage,
    .shareTrait,
    .instanceSharing,
    .artistTour,
    .audiobookGenre,
    .concept,
    .originalVideo,
    .smartShuffle,
    .liveEvents,
    .audiobookRelations,
    .homePocBasecard,
    .audiobookSupplements,
    .paidPodcastBanner,
    .fewerAds,
    .watchFeedShowExplorer,
    .trackExtraDescriptors,
    .trackExtraAudioAttributes,
    .trackExtendedCredits,
    .simpleTrait,
    .audioAssociations,
    .videoAssociations,
    .playlistTuner,
    .artistVideosEntrypoint,
    .prerelease,
    .contentAlternatives,
    .snapshotSharing,
  ]
}

#endif  // swift(>=4.2)

struct Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader {
    get {return _header ?? Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var request: [Com_Spotify_Extendedmetadata_Proto_EntityRequest] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader? = nil
}

struct Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var country: String = String()

  var catalogue: String = String()

  var taskID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Extendedmetadata_Proto_EntityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uri: String = String()

  var query: [Com_Spotify_Extendedmetadata_Proto_ExtensionQuery] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Extendedmetadata_Proto_ExtensionQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var kind: Com_Spotify_Extendedmetadata_Proto_ExtensionKind = .unknownExtension

  var etag: String {
    get {return _etag ?? String()}
    set {_etag = newValue}
  }
  /// Returns true if `etag` has been explicitly set.
  var hasEtag: Bool {return self._etag != nil}
  /// Clears the value of `etag`. Subsequent reads from it will return its default value.
  mutating func clearEtag() {self._etag = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _etag: String? = nil
}

struct Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader {
    get {return _header ?? Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var extendedMetadata: [Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArray] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader? = nil
}

struct Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader {
    get {return _header ?? Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var kind: Com_Spotify_Extendedmetadata_Proto_ExtensionKind = .unknownExtension

  var extensionData: [Com_Spotify_Extendedmetadata_Proto_EntityExtensionData] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader? = nil
}

struct Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var providerErrorStatus: Int32 = 0

  var cacheTtlInSeconds: Int64 = 0

  var offlineTtlInSeconds: Int64 = 0

  var extensionType: Com_Spotify_Extendedmetadata_Proto_ExtensionType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Extendedmetadata_Proto_EntityExtensionData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader {
    get {return _header ?? Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var entityUri: String = String()

  ///Metadata object
  var extensionData: SwiftProtobuf.Google_Protobuf_Any {
    get {return _extensionData ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_extensionData = newValue}
  }
  /// Returns true if `extensionData` has been explicitly set.
  var hasExtensionData: Bool {return self._extensionData != nil}
  /// Clears the value of `extensionData`. Subsequent reads from it will return its default value.
  mutating func clearExtensionData() {self._extensionData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader? = nil
  fileprivate var _extensionData: SwiftProtobuf.Google_Protobuf_Any? = nil
}

struct Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var statusCode: Int32 = 0

  var etag: String = String()

  var locale: String = String()

  var cacheTtlInSeconds: Int64 = 0

  var offlineTtlInSeconds: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Extendedmetadata_Proto_PlainListAssoc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entityUri: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Extendedmetadata_Proto_AssocHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Spotify_Extendedmetadata_Proto_Assoc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Com_Spotify_Extendedmetadata_Proto_AssocHeader {
    get {return _header ?? Com_Spotify_Extendedmetadata_Proto_AssocHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var plainList: Com_Spotify_Extendedmetadata_Proto_PlainListAssoc {
    get {return _plainList ?? Com_Spotify_Extendedmetadata_Proto_PlainListAssoc()}
    set {_plainList = newValue}
  }
  /// Returns true if `plainList` has been explicitly set.
  var hasPlainList: Bool {return self._plainList != nil}
  /// Clears the value of `plainList`. Subsequent reads from it will return its default value.
  mutating func clearPlainList() {self._plainList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Com_Spotify_Extendedmetadata_Proto_AssocHeader? = nil
  fileprivate var _plainList: Com_Spotify_Extendedmetadata_Proto_PlainListAssoc? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Com_Spotify_Extendedmetadata_Proto_ExtensionType: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_ExtensionKind: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequest: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_EntityRequest: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_ExtensionQuery: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponse: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArray: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionData: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_PlainListAssoc: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_AssocHeader: @unchecked Sendable {}
extension Com_Spotify_Extendedmetadata_Proto_Assoc: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.spotify.extendedmetadata.proto"

extension Com_Spotify_Extendedmetadata_Proto_ExtensionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "GENERIC"),
    2: .same(proto: "ASSOC"),
  ]
}

extension Com_Spotify_Extendedmetadata_Proto_ExtensionKind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_EXTENSION"),
    1: .same(proto: "CANVAZ"),
    2: .same(proto: "STORYLINES"),
    3: .same(proto: "PODCAST_TOPICS"),
    4: .same(proto: "PODCAST_SEGMENTS"),
    5: .same(proto: "AUDIO_FILES"),
    6: .same(proto: "TRACK_DESCRIPTOR"),
    7: .same(proto: "PODCAST_COUNTER"),
    8: .same(proto: "ARTIST_V4"),
    9: .same(proto: "ALBUM_V4"),
    10: .same(proto: "TRACK_V4"),
    11: .same(proto: "SHOW_V4"),
    12: .same(proto: "EPISODE_V4"),
    13: .same(proto: "PODCAST_HTML_DESCRIPTION"),
    14: .same(proto: "PODCAST_QUOTES"),
    15: .same(proto: "USER_PROFILE"),
    16: .same(proto: "CANVAS_V1"),
    17: .same(proto: "SHOW_V4_BASE"),
    18: .same(proto: "SHOW_V4_EPISODES_ASSOC"),
    19: .same(proto: "TRACK_DESCRIPTOR_SIGNATURES"),
    20: .same(proto: "PODCAST_AD_SEGMENTS"),
    21: .same(proto: "EPISODE_TRANSCRIPTS"),
    22: .same(proto: "PODCAST_SUBSCRIPTIONS"),
    23: .same(proto: "EXTRACTED_COLOR"),
    24: .same(proto: "PODCAST_VIRALITY"),
    25: .same(proto: "IMAGE_SPARKLES_HACK"),
    26: .same(proto: "PODCAST_POPULARITY_HACK"),
    27: .same(proto: "AUTOMIX_MODE"),
    28: .same(proto: "CUEPOINTS"),
    29: .same(proto: "PODCAST_POLL"),
    30: .same(proto: "EPISODE_ACCESS"),
    31: .same(proto: "SHOW_ACCESS"),
    32: .same(proto: "PODCAST_QNA"),
    33: .same(proto: "CLIPS"),
    34: .same(proto: "SHOW_V5"),
    35: .same(proto: "EPISODE_V5"),
    36: .same(proto: "PODCAST_CTA_CARDS"),
    37: .same(proto: "PODCAST_RATING"),
    38: .same(proto: "DISPLAY_SEGMENTS"),
    39: .same(proto: "GREENROOM"),
    40: .same(proto: "USER_CREATED"),
    41: .same(proto: "SHOW_DESCRIPTION"),
    42: .same(proto: "SHOW_HTML_DESCRIPTION"),
    43: .same(proto: "SHOW_PLAYABILITY"),
    44: .same(proto: "EPISODE_DESCRIPTION"),
    45: .same(proto: "EPISODE_HTML_DESCRIPTION"),
    46: .same(proto: "EPISODE_PLAYABILITY"),
    47: .same(proto: "SHOW_EPISODES_ASSOC"),
    48: .same(proto: "CLIENT_CONFIG"),
    49: .same(proto: "PLAYLISTABILITY"),
    50: .same(proto: "AUDIOBOOK_V5"),
    51: .same(proto: "CHAPTER_V5"),
    52: .same(proto: "AUDIOBOOK_SPECIFICS"),
    53: .same(proto: "EPISODE_RANKING"),
    54: .same(proto: "HTML_DESCRIPTION"),
    55: .same(proto: "CREATOR_CHANNEL"),
    56: .same(proto: "AUDIOBOOK_PROVIDERS"),
    57: .same(proto: "PLAY_TRAIT"),
    58: .same(proto: "CONTENT_WARNING"),
    59: .same(proto: "IMAGE_CUE"),
    60: .same(proto: "STREAM_COUNT"),
    61: .same(proto: "AUDIO_ATTRIBUTES"),
    62: .same(proto: "NAVIGABLE_TRAIT"),
    63: .same(proto: "NEXT_BEST_EPISODE"),
    64: .same(proto: "AUDIOBOOK_PRICE"),
    65: .same(proto: "EXPRESSIVE_PLAYLISTS"),
    66: .same(proto: "DYNAMIC_SHOW_EPISODE"),
    67: .same(proto: "LIVE"),
    68: .same(proto: "SKIP_PLAYED"),
    69: .same(proto: "AD_BREAK_FREE_PODCASTS"),
    70: .same(proto: "ASSOCIATIONS"),
    71: .same(proto: "PLAYLIST_EVALUATION"),
    72: .same(proto: "CACHE_INVALIDATIONS"),
    73: .same(proto: "LIVESTREAM_ENTITY"),
    74: .same(proto: "SINGLE_TAP_REACTIONS"),
    75: .same(proto: "USER_COMMENTS"),
    76: .same(proto: "CLIENT_RESTRICTIONS"),
    77: .same(proto: "PODCAST_GUEST"),
    78: .same(proto: "PLAYABILITY"),
    79: .same(proto: "COVER_IMAGE"),
    80: .same(proto: "SHARE_TRAIT"),
    81: .same(proto: "INSTANCE_SHARING"),
    82: .same(proto: "ARTIST_TOUR"),
    83: .same(proto: "AUDIOBOOK_GENRE"),
    84: .same(proto: "CONCEPT"),
    85: .same(proto: "ORIGINAL_VIDEO"),
    86: .same(proto: "SMART_SHUFFLE"),
    87: .same(proto: "LIVE_EVENTS"),
    88: .same(proto: "AUDIOBOOK_RELATIONS"),
    89: .same(proto: "HOME_POC_BASECARD"),
    90: .same(proto: "AUDIOBOOK_SUPPLEMENTS"),
    91: .same(proto: "PAID_PODCAST_BANNER"),
    92: .same(proto: "FEWER_ADS"),
    93: .same(proto: "WATCH_FEED_SHOW_EXPLORER"),
    94: .same(proto: "TRACK_EXTRA_DESCRIPTORS"),
    95: .same(proto: "TRACK_EXTRA_AUDIO_ATTRIBUTES"),
    96: .same(proto: "TRACK_EXTENDED_CREDITS"),
    97: .same(proto: "SIMPLE_TRAIT"),
    98: .same(proto: "AUDIO_ASSOCIATIONS"),
    99: .same(proto: "VIDEO_ASSOCIATIONS"),
    100: .same(proto: "PLAYLIST_TUNER"),
    101: .same(proto: "ARTIST_VIDEOS_ENTRYPOINT"),
    102: .same(proto: "PRERELEASE"),
    103: .same(proto: "CONTENT_ALTERNATIVES"),
    105: .same(proto: "SNAPSHOT_SHARING"),
  ]
}

extension Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchedEntityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.request) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.request.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.request, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequest, rhs: Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchedEntityRequestHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "country"),
    2: .same(proto: "catalogue"),
    3: .standard(proto: "task_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.country) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.catalogue) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.taskID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.country.isEmpty {
      try visitor.visitSingularStringField(value: self.country, fieldNumber: 1)
    }
    if !self.catalogue.isEmpty {
      try visitor.visitSingularStringField(value: self.catalogue, fieldNumber: 2)
    }
    if !self.taskID.isEmpty {
      try visitor.visitSingularBytesField(value: self.taskID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader, rhs: Com_Spotify_Extendedmetadata_Proto_BatchedEntityRequestHeader) -> Bool {
    if lhs.country != rhs.country {return false}
    if lhs.catalogue != rhs.catalogue {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_EntityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "query"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.query) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.query.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.query, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_EntityRequest, rhs: Com_Spotify_Extendedmetadata_Proto_EntityRequest) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.query != rhs.query {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_ExtensionQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtensionQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "etag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._etag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.kind != .unknownExtension {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    try { if let v = self._etag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_ExtensionQuery, rhs: Com_Spotify_Extendedmetadata_Proto_ExtensionQuery) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs._etag != rhs._etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchedExtensionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "extended_metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.extendedMetadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.extendedMetadata.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extendedMetadata, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponse, rhs: Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.extendedMetadata != rhs.extendedMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchedExtensionResponseHeader"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader, rhs: Com_Spotify_Extendedmetadata_Proto_BatchedExtensionResponseHeader) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityExtensionDataArray"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "kind"),
    3: .standard(proto: "extension_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.kind) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.extensionData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.kind != .unknownExtension {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 2)
    }
    if !self.extensionData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extensionData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArray, rhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArray) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.extensionData != rhs.extensionData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityExtensionDataArrayHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "provider_error_status"),
    2: .standard(proto: "cache_ttl_in_seconds"),
    3: .standard(proto: "offline_ttl_in_seconds"),
    4: .standard(proto: "extension_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.providerErrorStatus) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.cacheTtlInSeconds) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.offlineTtlInSeconds) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.extensionType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.providerErrorStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.providerErrorStatus, fieldNumber: 1)
    }
    if self.cacheTtlInSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.cacheTtlInSeconds, fieldNumber: 2)
    }
    if self.offlineTtlInSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.offlineTtlInSeconds, fieldNumber: 3)
    }
    if self.extensionType != .unknown {
      try visitor.visitSingularEnumField(value: self.extensionType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader, rhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataArrayHeader) -> Bool {
    if lhs.providerErrorStatus != rhs.providerErrorStatus {return false}
    if lhs.cacheTtlInSeconds != rhs.cacheTtlInSeconds {return false}
    if lhs.offlineTtlInSeconds != rhs.offlineTtlInSeconds {return false}
    if lhs.extensionType != rhs.extensionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityExtensionData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "entity_uri"),
    3: .standard(proto: "extension_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.entityUri) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._extensionData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.entityUri.isEmpty {
      try visitor.visitSingularStringField(value: self.entityUri, fieldNumber: 2)
    }
    try { if let v = self._extensionData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionData, rhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionData) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.entityUri != rhs.entityUri {return false}
    if lhs._extensionData != rhs._extensionData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EntityExtensionDataHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "status_code"),
    2: .same(proto: "etag"),
    3: .same(proto: "locale"),
    4: .standard(proto: "cache_ttl_in_seconds"),
    5: .standard(proto: "offline_ttl_in_seconds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.statusCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.locale) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.cacheTtlInSeconds) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.offlineTtlInSeconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.statusCode != 0 {
      try visitor.visitSingularInt32Field(value: self.statusCode, fieldNumber: 1)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 2)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 3)
    }
    if self.cacheTtlInSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.cacheTtlInSeconds, fieldNumber: 4)
    }
    if self.offlineTtlInSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.offlineTtlInSeconds, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader, rhs: Com_Spotify_Extendedmetadata_Proto_EntityExtensionDataHeader) -> Bool {
    if lhs.statusCode != rhs.statusCode {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.locale != rhs.locale {return false}
    if lhs.cacheTtlInSeconds != rhs.cacheTtlInSeconds {return false}
    if lhs.offlineTtlInSeconds != rhs.offlineTtlInSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_PlainListAssoc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlainListAssoc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.entityUri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityUri.isEmpty {
      try visitor.visitRepeatedStringField(value: self.entityUri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_PlainListAssoc, rhs: Com_Spotify_Extendedmetadata_Proto_PlainListAssoc) -> Bool {
    if lhs.entityUri != rhs.entityUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_AssocHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssocHeader"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_AssocHeader, rhs: Com_Spotify_Extendedmetadata_Proto_AssocHeader) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Spotify_Extendedmetadata_Proto_Assoc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Assoc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "plain_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._plainList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._plainList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Spotify_Extendedmetadata_Proto_Assoc, rhs: Com_Spotify_Extendedmetadata_Proto_Assoc) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._plainList != rhs._plainList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
